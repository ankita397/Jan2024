/*
* https://leetcode.com/problems/edit-distance/
* Type : Edit
* 2 indexes needed to represent the 2 strings
* INTUITION : match - no operations needed - only shrink both strings
*            non-match - try all operations - insert, replace and delete and take the max
* f(n-1, m-1) - Min operations needed to convert of s1 (0 to n-1) to s2 (0 to n-1) .
* base case -if s1 gets exhausted, we have do insert of remaining letters in s2
*            if s2 gets exhausted, we have to do delete for remaining letters in s1
*/
class Solution {
    //Recursion
    //TC = exponential
    //SC = O(n+m) - ASS
    /*public int minDistance(String word1, String word2) {
        int n = word1.length();
        int m = word2.length();
        return editDist(word1,word2,n-1,m-1);
    }

    public int editDist(String s1, String s2, int i, int j){
        //base case
        //if s1 gets exhausted, we have do insert of remaining letters in s2
        //s1= ""(as it got exhausted) remaining, s2="ro" - we need 2 inserts to get s2 f'm s1
        if(i < 0)
            return j+1;// index+1
        //if s2 gets exhausted, we have to do delete for remaining letters in s1
        //s1= "hor" remaining, s2=""(as it got exhausted) - we need 3 deletes to get s2 f'm s1
        if(j < 0)
            return i+1;

        //match
        if(s1.charAt(i) == s2.charAt(j)){
            //no operations needed - only shrink both strings
            return 0 + editDist(s1,s2,i-1,j-1);
        }    
        //try all operations - insert, replace and delete and take the max
        //add 1 for each operation performed 
        return Math.min(1+editDist(s1,s2,i,j-1) ,//insert - insert a char after i so i does not
                                                    //have to be reduced
                Math.min(1+editDist(s1,s2,i-1,j-1),//replace - replace and match so shrink both
                        1+editDist(s1,s2,i-1,j)));// delete - shrink only s1 after deleting the                                               last char(non-matching char)

    }*/

    //Memoization
    //TC = O(n*m)
    //SC = O(n*m) + O(n+m) - ASS
    /*public int minDistance(String word1, String word2) {
        int n = word1.length();
        int m = word2.length();
        int[][] dp = new int[n][m];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                dp[i][j] = -1;
            }
        }
        return editDist(word1,word2,n-1,m-1,dp);
    }

    public int editDist(String s1, String s2, int i, int j,int[][] dp ){
        //base case
        //if s1 gets exhausted, we have do insert of remaining letters in s2
        //s1= ""(as it got exhausted) remaining, s2="ro" - we need 2 inserts to get s2 f'm s1
        if(i < 0)
            return j+1;// index+1
        //if s2 gets exhausted, we have to do delete for remaining letters in s1
        //s1= "hor" remaining, s2=""(as it got exhausted) - we need 3 deletes to get s2 f'm s1
        if(j < 0)
            return i+1;

        if(dp[i][j] != -1){
            return dp[i][j];
        }

        //match
        if(s1.charAt(i) == s2.charAt(j)){
            //no operations needed - only shrink both strings
            return dp[i][j] = 0 + editDist(s1,s2,i-1,j-1,dp);
        }    
        //try all operations - insert, replace and delete and take the max
        //add 1 for each operation performed 
        return dp[i][j] = Math.min(1+editDist(s1,s2,i,j-1,dp) ,//insert - insert a char after i so i does not
                                                    //have to be reduced
                Math.min(1+editDist(s1,s2,i-1,j-1,dp),//replace - replace and match so shrink both
                        1+editDist(s1,s2,i-1,j,dp)));// delete - shrink only s1 after deleting the                                               last char(non-matching char) to try matching next char

    }*/

    //Memoization with index shifting
    //TC = O(n*m)
    //SC = O(n*m) + O(n+m) - ASS
    /*public int minDistance(String word1, String word2) {
        int n = word1.length();
        int m = word2.length();
        int[][] dp = new int[n+1][m+1];
        for(int i = 0; i <= n; i++){
            for(int j = 0; j <= m; j++){
                dp[i][j] = -1;
            }
        }
        return editDist(word1,word2,n,m,dp);
    }

    public int editDist(String s1, String s2, int i, int j,int[][] dp ){
        //base case
        //if s1 gets exhausted, we have do insert of remaining letters in s2
        //s1= ""(as it got exhausted) remaining, s2="ro" - we need 2 inserts to get s2 f'm s1
        if(i == 0)
            return j;// index+1
        //if s2 gets exhausted, we have to do delete for remaining letters in s1
        //s1= "hor" remaining, s2=""(as it got exhausted) - we need 3 deletes to get s2 f'm s1
        if(j == 0)
            return i;

        if(dp[i][j] != -1){
            return dp[i][j];
        }

        //match
        if(s1.charAt(i-1) == s2.charAt(j-1)){
            //no operations needed - only shrink both strings
            return dp[i][j] = 0 + editDist(s1,s2,i-1,j-1,dp);
        }    
        //try all operations - insert, replace and delete and take the max
        //add 1 for each operation performed 
        return dp[i][j] = Math.min(1+editDist(s1,s2,i,j-1,dp) ,//insert - insert a char after i so i does not
                                                    //have to be reduced
                Math.min(1+editDist(s1,s2,i-1,j-1,dp),//replace - replace and match so shrink both
                        1+editDist(s1,s2,i-1,j,dp)));// delete - shrink only s1 after deleting the                                               last char(non-matching char) to try matching next char

    }*/


    //Tabulation
    //TC = O(n*m)
    //SC = O(n*m)
    /*public int minDistance(String word1, String word2) {
        int n = word1.length();
        int m = word2.length();
        int[][] dp = new int[n+1][m+1];

        //base
        for(int j = 0; j <= m; j++){
            dp[0][j] = j;
        }
        for(int i = 0; i <= n; i++){
            dp[i][0] = i;
        }

        //bottom up - 0 to n
        for(int i = 1; i <= n; i++){
            for(int j = 1; j <= m; j++){
                //match
                if(word1.charAt(i-1) == word2.charAt(j-1)){
                    //no operations needed - only shrink both strings
                    dp[i][j] = 0 + dp[i-1][j-1];
                }else{  // else needed
                    //try all operations - insert, replace and delete and take the max
                    //add 1 for each operation performed 
                    dp[i][j] =  Math.min(1+dp[i][j-1] ,//insert - insert a char after i so i does not
                                                                //have to be reduced
                            Math.min(1+dp[i-1][j-1],//replace - replace and match so shrink both
                                    1+dp[i-1][j]));// delete - shrink only s1 after deleting the                                               last char(non-matching char) to try matching next char
                }
            }
        }
        return dp[n][m];
    }*/

    //SO
    //TC = O(n*m)
    //SC = O(m)
    public int minDistance(String word1, String word2) {
        int n = word1.length();
        int m = word2.length();
        int[] prev = new int[m+1];

        //base
        for(int j = 0; j <= m; j++){
            prev[j] = j;
        }
        //i loop is not required as in the first prev array, all cells will be 0 initially
        //done for curr later
        // for(int i = 0; i <= n; i++){
        //     dp[i][0] = i;
        // }

        //bottom up - 0 to n
        for(int i = 1; i <= n; i++){
             int[] curr = new int[m+1];
             curr[0] = i;//for each curr, it should have i value in its 0th index(1st col) - base case i loop
            for(int j = 1; j <= m; j++){
                //match
                if(word1.charAt(i-1) == word2.charAt(j-1)){
                    //no operations needed - only shrink both strings
                    curr[j] = 0 + prev[j-1];
                }else{  // else needed
                    //try all operations - insert, replace and delete and take the max
                    //add 1 for each operation performed 
                    curr[j] =  Math.min(1+curr[j-1] ,//insert - insert a char after i so i does not
                                                                //have to be reduced
                            Math.min(1+prev[j-1],//replace - replace and match so shrink both
                                    1+prev[j]));// delete - shrink only s1 after deleting the                                               last char(non-matching char) to try matching next char
                }
            }
            prev = curr;
        }
        return prev[m];
    }
}
