/*
* https://leetcode.com/problems/distinct-subsequences/
* Type : Comparison
* 2 indexes needed to represent the 2 strings
* INTUITION : match - we can take that match or we can keep searching for another match in shrinked first string - 2 possibilities - add
*            non-match - if character does not match try to find match in shrinked first string
* f(n-1, m-1) - Distinct number of sebsequences of s2 (0 to m-1) in s1 (0 to n-1) .
* base case - if 2nd string gets exhausted - we know we have found match - return 1
*            if 1st string gets exhausted - we know we did not found match for 2nd str 
*/
class Solution {
    //Recursion
    //TC = O(2^n + 2^m)
    //SC = O(n+m)
    /*public int numDistinct(String s, String t) {
        int n = s.length();
        int m = t.length();

        return subDistinct(s,t,n-1,m-1);
    }
    public int subDistinct(String s, String t, int i, int j){
        //base - count ways - base case should return 0 or 1
        if(j < 0) // if 2nd string gets exhausted - we know we have found match 
            return 1; // do this first
        if(i < 0) // if 1st string gets exhausted - we know we did not found match for 2nd str
            return 0;


        if(s.charAt(i) == t.charAt(j)){
            // when we find a match we can take that match or we can keep searching for another match in shrinked first string
            return subDistinct(s,t,i-1,j-1) + subDistinct(s,t,i-1,j);
        }
        //if character does not match try to find match in shrinked first string
        return subDistinct(s,t,i-1,j);
    }*/

    //Memoization 
    //TC = O(n*m)
    //SC = O(n*m) +O(n+m) => dp array + ASS
    /*public int numDistinct(String s, String t) {
        int n = s.length();
        int m = t.length();
        int[][] dp = new int[n][m];
        for(int i = 0 ; i < n; i++){
            for(int j = 0 ; j < m; j++){
                dp[i][j] = -1;
            }
        }
        return subDistinct(s,t,n-1,m-1,dp);
    }
    public int subDistinct(String s, String t, int i, int j,int[][] dp){
        //base - count ways - base case should return 0 or 1
        if(j < 0) // if 2nd string gets exhausted - we know we have found match 
            return 1; // do this first
        if(i < 0) // if 1st string gets exhausted - we know we did not found match for t
            return 0;
        if(dp[i][j] != -1)
            return dp[i][j];

        if(s.charAt(i) == t.charAt(j)){
            // when we find a match we can take that match or we can keep searching for another match in shrinked first string
            return dp[i][j] = subDistinct(s,t,i-1,j-1,dp) + subDistinct(s,t,i-1,j,dp);
        }
        //if character does not match try to find match in shrinked first string
        return dp[i][j] = subDistinct(s,t,i-1,j,dp);
    }*/

    //Memoization with index shifting to 1 place right(required for tabulation later as we cannot have dp[-1][-1])
    //TC = O(n*m)
    //SC = O(n*m) +O(n+m) => dp array + ASS
    /*public int numDistinct(String s, String t) {
        int n = s.length();
        int m = t.length();
        int[][] dp = new int[n+1][m+1];
        for(int i = 0 ; i <= n; i++){
            for(int j = 0 ; j <= m; j++){
                dp[i][j] = -1;
            }
        }
        return subDistinct(s,t,n,m,dp);
    }
    public int subDistinct(String s, String t, int i, int j,int[][] dp){
        //base - count ways - base case should return 0 or 1
        if(j == 0) // if 2nd string gets exhausted - we know we have found match 
            return 1; // do this first
        if(i == 0) // if 1st string gets exhausted - we know we did not found match for t
            return 0;
        if(dp[i][j] != -1)
            return dp[i][j];

        if(s.charAt(i-1) == t.charAt(j-1)){
            // when we find a match we can take that match or we can keep searching for another match in shrinked first string
            return dp[i][j] = subDistinct(s,t,i-1,j-1,dp) + subDistinct(s,t,i-1,j,dp);
        }
        //if character does not match try to find match in shrinked first string
        return dp[i][j] = subDistinct(s,t,i-1,j,dp);
    }*/

    //Tabulation
    //TC = O(n*m)
    //SC = O(n*m)
    /*public int numDistinct(String s, String t) {
        int n = s.length();
        int m = t.length();
        int[][] dp = new int[n+1][m+1];
        //base case
        for(int i=0; i <= n; i++){
            dp[i][0] = 1;
        }
        for(int j=1; j <= m; j++){//start from 1 as we are already returning 1 for j = 0
            dp[0][j] = 0;
        }

        for(int i=1; i <= n; i++){
            for(int j=1; j <= m; j++){
                if(s.charAt(i-1) == t.charAt(j-1)){
                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j];
                }else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        return dp[n][m];
    }*/

    //SO - 2 arrays
    //TC = O(n*m)
    //SC = O(m)
    /*public int numDistinct(String s, String t) {
        int n = s.length();
        int m = t.length();
        int[] prev = new int[m+1];
        //base case
        prev[0] = 1;

        for(int i=1; i <= n; i++){
            int[] curr = new int[m+1];
            curr[0] = 1;
            for(int j=1; j <= m; j++){
                if(s.charAt(i-1) == t.charAt(j-1)){
                    curr[j] = prev[j-1] + prev[j];
                }else{
                    curr[j] = prev[j];
                }
            }
            prev = curr;
        }
        return prev[m];
    }*/

    //SO - 1 array
    //TC = O(n*m)
    //SC = O(m)
    public int numDistinct(String s, String t) {
        int n = s.length();
        int m = t.length();
        int[] prev = new int[m+1];
        //base case
        prev[0] = 1;

        for(int i=1; i <= n; i++){
            for(int j=m; j >= 1; j--){
                if(s.charAt(i-1) == t.charAt(j-1)){
                    prev[j] = prev[j-1] + prev[j];
                }
                // else{
                //     prev[j] = prev[j];
                // }
            }
        }
        return prev[m];
    }
}
