/*
* https://leetcode.com/problems/longest-common-subsequence/submissions/1238218065/
* Type : Comparison
* 2 indexes needed to represent the 2 strings
* INTUITION : match - add 1 to length and move index of both strings to left/ shrink both the strings
*            non-match - shrink either s1 or s1 and take max of both
* base case - -ve means end of string (i==0 || j ==0)
*/
class Solution {
    //Recursion
    //TC = O(2^n + 2^m)
    //SC = O(n+m)
    /*public int longestCommonSubsequence(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();

        return lcs(text1,text2,n-1,m-1);
    }

    public int lcs(String s1, String s2,int i, int j){
        //base case - -ve means end of string
        if(i < 0 || j < 0)
            return 0;
        

        //match case
        if(s1.charAt(i) == s2.charAt(j)){
            return 1 + lcs(s1,s2,i-1,j-1);
        }
        //non-match case
        return Math.max(lcs(s1,s2,i-1,j), lcs(s1,s2,i,j-1));
    }*/

    //Memoization 
    //TC = O(n*m)
    //SC = O(n*m) +O(n+m) => dp array + ASS
    /*public int longestCommonSubsequence(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();
        int[][] dp = new int[n][m];
        for(int i = 0 ; i < n; i++){
            for(int j = 0 ; j < m; j++){
                dp[i][j] = -1;
            }
        }
        return lcs(text1,text2,n-1,m-1, dp);
    }

    public int lcs(String s1, String s2,int i, int j, int[][] dp){
        //base case - -ve means end of string
        if(i < 0 || j < 0)
            return 0;
        
        if(dp[i][j] != -1)
            return dp[i][j];
        if(s1.charAt(i) == s2.charAt(j)){
            return dp[i][j] = 1 + lcs(s1,s2,i-1,j-1,dp);
        }
        return dp[i][j] = Math.max(lcs(s1,s2,i-1,j,dp), lcs(s1,s2,i,j-1,dp));
    }*/

    //Memoization with index shifting to 1 place right(required for tabulation later as we cannot have dp[-1][-1])
    //TC = O(n*m)
    //SC = O(n*m) +O(n+m) => dp array + ASS
    /*public int longestCommonSubsequence(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();
        int[][] dp = new int[n+1][m+1];
        for(int i = 0 ; i <= n; i++){
            for(int j = 0 ; j <= m; j++){
                dp[i][j] = -1;
            }
        }
        return lcs(text1,text2,n,m, dp);
    }

    public int lcs(String s1, String s2,int i, int j, int[][] dp){
        //base case - changes to i==0 || j==0 due to index shifting as n-1 becomes n and m-1 becomes m
        if(i == 0 || j == 0)
            return 0;
        
        if(dp[i][j] != -1)
            return dp[i][j];
        if(s1.charAt(i-1) == s2.charAt(j-1)){
            return dp[i][j] = 1 + lcs(s1,s2,i-1,j-1,dp);
        }
        return dp[i][j] = Math.max(lcs(s1,s2,i-1,j,dp), lcs(s1,s2,i,j-1,dp));
    }*/

    //Tabulation
    //TC = O(n*m)
    //SC = O(n*m)
    /*public int longestCommonSubsequence(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();
        int[][] dp = new int[n+1][m+1];
        
        //base case -  i==0 || j==0 
        for(int j = 0; j <= m; j++){
            dp[0][j] = 0;
        }
        for(int i = 0; i <= n; i++){
            dp[i][0] = 0;
        }
        
        for(int i = 1; i <= n; i++){
            for(int j = 1; j <= m; j++){
                if(text1.charAt(i-1) == text2.charAt(j-1)){
                    dp[i][j] = 1 + dp[i-1][j-1];
                }else{// else is needed as we don't return from if
                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        return dp[n][m];
    }*/

    //Space Optimization
    //TC = O(n*m)
    //SC = O(m)
    public int longestCommonSubsequence(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();
        int[] prev = new int[m+1];

        //base case -  i==0 || j==0 
        //The cells in first row will always be 0 so we don't need loop for column
        for(int j = 0; j <= m; j++){
            prev[j] = 0;
        }
        
        for(int i = 1; i <= n; i++){
            int[] curr = new int[m+1];
            for(int j = 1; j <= m; j++){
                if(text1.charAt(i-1) == text2.charAt(j-1)){
                    curr[j] = 1 + prev[j-1];
                }else{
                    curr[j] = Math.max(prev[j], curr[j-1]);
                }
            }
            prev = curr;
        }
        return prev[m];
    }

}
