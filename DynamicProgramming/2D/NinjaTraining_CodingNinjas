//Explanation in copy - https://www.youtube.com/watch?v=AE39gJYuRog&list=PLgUwDviBIf0pwFf-BnpkXxs0Ra0eU2sJY&index=4

//Recursion - TLE
public class Solution {
    public static int ninjaTraining(int n, int points[][]) {
        //We start from day = n-1 with last = 3 since on the very first day, the nija with have the option 
        //to perform all 3 tasks 
        return maxPoints(n-1, 3, points);
    }

    public static int maxPoints(int day, int last, int points[][]){
        if(day == 0){//base
             int maxi = 0;
            for(int task = 0; task < 3; task++){// 0,1,2 - 3 tasks
                if(task != last){// task cannot be same as the previous day's last
                    maxi = Math.max(maxi, points[0][task]);// On day 0, we just take max of all tasks
                }
            }
            return maxi;
        }
        int maxi = 0;
        for(int task = 0; task < 3; task++){// 0,1,2 - 3 tasks
                if(task != last){// task cannot be same as the previous day's last
                    int point = points[day][task]+ maxPoints(day-1, task, points);
                    //points[day][task] - current day's points
                    //maxPoints(day-1, task, points) - compute the points for remaining days recursively
                    maxi = Math.max(maxi, point);
                }
        }
        return maxi;
    }

}

//Memoization - 
//TC = O(N*4*3) - 4 tasks & loops 3 times 
//SC = O(N) - rec stack space + O(N*4) - dp array
public class Solution {
    public static int ninjaTraining(int n, int points[][]) {
        int[][] dp = new int[n][4];// 2 changing parameters(day and task) - n = days, 4 = no of tasks(0,1,2,3)
        for(int i = 0; i < n; i++){
            for(int j = 0; j < 4; j++){
                dp[i][j] = -1;
            }
        }
        //We start from day = n-1 with last = 3 since on the very first day, the nija with have the option 
        //to perform all 3 tasks 
        return maxPoints(n-1, 3, points, dp);
    }

    public static int maxPoints(int day, int last, int points[][], int dp[][]){
        if(day == 0){//base
             int maxi = 0;
            for(int task = 0; task < 3; task++){// 0,1,2 - 3 tasks
                if(task != last){// task cannot be same as the previous day's last
                    maxi = Math.max(maxi, points[0][task]);// On day 0, we just take max of all tasks
                }
            }
            return maxi;
        }
        if(dp[day][last] != -1){// sub-problem already computed - overlapping sub-problem
            return dp[day][last];
        }
        int maxi = 0;
        for(int task = 0; task < 3; task++){// 0,1,2 - 3 tasks
                if(task != last){// task cannot be same as the previous day's last
                    int point = points[day][task]+ maxPoints(day-1, task, points, dp);
                    //points[day][task] - current day's points
                    //maxPoints(day-1, task, points) - compute the points for remaining days recursively
                    maxi = Math.max(maxi, point);
                }
        }
        return dp[day][last] = maxi;
    }

}

//Tabulation 
//TC = O(N*4*3) - 4 tasks & loops 3 times 
//SC = O(N*4) - dp array
public class Solution {
    public static int ninjaTraining(int n, int points[][]) {
        int[][] dp = new int[n][4];// n = days, 4 = no of tasks(0,1,2,3)
        
    // bases cases - 4 for day = 0 and task = 0,1,2,3 - can run loop also for task
        dp[0][0] = Math.max(points[0][1], points[0][2]);
        dp[0][1] = Math.max(points[0][0], points[0][2]);
        dp[0][2] = Math.max(points[0][0], points[0][1]);
        dp[0][3] = Math.max(points[0][0], Math.max(points[0][1],points[0][2]));

        //IMP : These first 2 loops (day and last) are for the 2D DP array
        //Days remaining 1 to n-1
            for (int day = 1; day < n; day++) {
                for (int last = 0; last < 4; last++) {
                    dp[day][last] = 0; // Initialize the maximum points for the current day and last activity
                    // Consider each possible task for the current day
                    for (int task = 0; task <= 2; task++) {
                        if (task != last) { // Ensure that the current task is different from the last
                            // Calculate the points for the current activity and add it to the maximum points from the previous day
                            int activity = points[day][task] + dp[day - 1][task];
                            // Update the maximum points for the current day and last activity
                            dp[day][last] = Math.max(dp[day][last], activity);
                        }
                    }
                }
            }

        // Return the maximum points achievable after all days (last activity is 3)
        return dp[n - 1][3];
    }

}

//Space Optimization
//TC = O(N*4*3) - 4 tasks & loops 3 times 
//SC = O(4) - size 4 array
public class Solution {
    public static int ninjaTraining(int n, int points[][]) {
        //To compute for day n, we just need day n-1's data 
        //So nX4 matrix is not required. Only a 1D matrix would work
        int[] prev = new int[4];// n = days, 4 = no of tasks(0,1,2,3)
        
    // bases cases - 4 for day = 0 and task = 0,1,2,3
        prev[0] = Math.max(points[0][1], points[0][2]);
        prev[1] = Math.max(points[0][0], points[0][2]);
        prev[2] = Math.max(points[0][0], points[0][1]);
        prev[3] = Math.max(points[0][0], Math.max(points[0][1],points[0][2]));

        //IMP : These first 2 loops (day and last) are for the 2D DP array
        //Days remaining 1 to n-1
            for (int day = 1; day < n; day++) {
                // Initialize an array 'temp' to store the maximum points for the current day
                int temp[] = new int[4];
                for (int last = 0; last < 4; last++) {
                    temp[last] = 0; // Initialize the maximum points for the current day and last activity
                    // Consider each possible task for the current day
                    for (int task = 0; task <= 2; task++) {
                        if (task != last) { // Ensure that the current task is different from the last
                            // Calculate the points for the current activity and add it to the maximum points from the previous day
                            int activity = points[day][task] + prev[task];
                            // Update the maximum points for the current day and last activity
                            temp[last] = Math.max(temp[last], activity);
                        }
                    }
                }
                prev = temp;
            }

        // Return the maximum points achievable after all days (last activity is 3)
        return prev[3];
    }

}
