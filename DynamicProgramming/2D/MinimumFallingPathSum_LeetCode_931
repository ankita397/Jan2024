/*
* INTUITION : Call from all columns(loop over columns) of last row(n-1) as starting could be anything
* Move up(row reduces) and leftDiag(row and col reduces) and rightDiag(row and col increases)
* Add current cell value and recursively move left or leftDiag or right Diag
* Take minimum of up, leftDiag and rightDiag paths at each step
*/
class Solution {
    //starts at any element in the first row - variable start index
    public int minFallingPathSum(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;

        //Recursion
        //Call from all columns of last row as starting could be anything
        /*int minimum = (int)1e9;
        for(int j = 0; j < m; j++){
            minimum = Math.min(minimum, func(n-1,j,matrix));//SC = O(n) - func is called for n-1 rows 
        }
        return minimum;
        */

        //Memoization
        /*int minimum = (int)1e9;
        int[][] dp = new int[m+1][n+1];
        for(int i = 0; i < dp.length; i++){
            for(int j = 0; j < dp[0].length; j++){
                dp[i][j] = -1;
            }  
        }
        for(int j = 0; j < m; j++){
            minimum = Math.min(minimum, func(n-1,j,matrix, dp));//SC = O(n) - func is called for n-1 rows 
        }
        return minimum;*/

        //Tabulation
        //TC = O(n*m) + O(m) = 2 states loops + calling loop
        //SC = O(n*m) - dp array
        /*
        int[][] dp = new int[n][m];    
        //base case - i == 0, run loop for other changing index (j)
        // check for base case separately outside nested loop if base case is for only i == 0 or j == 0
        for(int j = 0; j < m; j++){
            dp[0][j] = matrix[0][j];
        } 

        for(int i = 1; i < n; i++){// we have solved for base case i = 0 earlier
            for(int j = 0; j < m; j++){// we will iterate over all columns starting from 0
                int leftDiag = (int)1e9;
                int rightDiag = (int)1e9;
                if(j > 0)
                    leftDiag = matrix[i][j] + dp[i-1][j-1];
                int up = matrix[i][j] + dp[i-1][j];
                if(j+1 < m)
                    rightDiag = matrix[i][j] + dp[i-1][j+1];

                dp[i][j] = Math.min(leftDiag, Math.min(up, rightDiag));
            }
        }  

        int minimum = (int)1e9; 
        for(int j = 0; j < m; j++){
            minimum = Math.min(minimum, dp[n-1][j]);//SC = O(n) - func is called for n-1 rows 
        }
        return minimum;
        */

        //Space Optimization
        //TC = O(n*m) + O(m) = 2 states loops + calling loop
        //SC = O(m) - 1 D array - single row
        int[] prev = new int[m];  

        //base case - i == 0
        for(int j = 0; j < m; j++){
            prev[j] = matrix[0][j];
        } 

        for(int i = 1; i < n; i++){// we have solved for base case i = 0 earlier
            int[] curr = new int[m];   
            for(int j = 0; j < m; j++){// we will iterate over all columns starting from 0
                int leftDiag = (int)1e9;
                int rightDiag = (int)1e9;
                if(j > 0){
                    leftDiag = matrix[i][j] + prev[j-1];
                }
                int up = matrix[i][j] + prev[j];
                if(j+1 < m){
                    rightDiag = matrix[i][j] + prev[j+1];
                }
                curr[j] = Math.min(leftDiag, Math.min(up, rightDiag));
            }
            prev = curr;
        }  

        int minimum = (int)1e9; 
        for(int j = 0; j < m; j++){
            minimum = Math.min(minimum, prev[j]);//SC = O(n) - func is called for n-1 rows 
        }
        return minimum;
    }

    //Recursion
    //TC = O(3^n) - 3 paths for n rows - up,leftDiag,rightDiag - TLE
    //SC = O(n) =>O(Path length) - here unlike LeetCode_64, we are going up in each step
            //So, single row gets executed once - so path length = n

    /*
    public int func(int i, int j, int[][] matrix) {
        //base case - first check boundary then destination
        //out of bounds
        //i will not go below 0 as we consider i = 0 as destination
        if(j < 0 || j >= matrix[0].length){
            return (int)1e9; // return a very big value to eliminate it from ans
        }
        //destination - i == 0 and j could be anything
        if(i == 0)
            return matrix[0][j];

        int leftDiag = matrix[i][j] + func(i-1,j-1,matrix);
        int up = matrix[i][j] + func(i-1,j,matrix);
        int rightDiag = matrix[i][j] + func(i-1,j+1,matrix);
        
        return Math.min(leftDiag, Math.min(up, rightDiag));
    }
    */


    //Memoization
    //TC = O(N * M) = no of states - TLE
    //SC = O(N) + O(N * M)= rec stack space + dp array
    /*public int func(int i, int j, int[][] matrix, int[][] dp) {
        //base case - first check boundary then destination
        //out of bounds 
        //i will not go below 0 as we consider i = 0 as destination
        if(j < 0 || j >= matrix[0].length){
            return (int)1e9; // return a very big value to eliminate it from ans
        }
        //destination - i == 0 and j could be anything
        if(i == 0)
            return matrix[0][j];

        if(dp[i][j] != -1){
            return dp[i][j];
        }

        int leftDiag = matrix[i][j] + func(i-1,j-1,matrix,dp);
        int up = matrix[i][j] + func(i-1,j,matrix,dp);
        int rightDiag = matrix[i][j] + func(i-1,j+1,matrix,dp);
        
        return dp[i][j] = Math.min(leftDiag, Math.min(up, rightDiag));
    }*/
}
