/*
* https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/
* Type : Infinite num of buy sell(txn) allowed
* 2 params - 1 for index and 1 to know if buy is allowed or not, since buy is not allowed if    * sell is not done(except for the first buy)
* INTUITION : - Try all ways to buy or sell.
*             - After each buy or sell move to next index(ind+1) and set the buyFlag param(0 or *               1) to signify if buy is allowed or not at ind+1
* base - ind == n - no days left - buy sell window is over so no profit at that index
* This SO can be implemented using 4 variables as well which we will use in LC 123
*/
//Recursion
//TC = O(2^n)
//SC = O(n)
class Solution {
   /* public int maxProfit(int[] prices) {
        int n = prices.length;
        return getMaxProfit(0,1,prices,n);// buyFlag is always allowed at first index
    }

    public int getMaxProfit(int ind, int buyFlag, int[] prices, int n) {
        int profit = 0;
        //base case 
        if(ind == n)//no days left - buy sell window is over so no profit at that index
            return 0;

        if(buyFlag == 1){//buying allowed - 2 options : buy or not buy
        //buy = money goes out of out pocket so -prices[ind]
            profit = Math.max(-prices[ind] + getMaxProfit(ind+1, 0, prices,n),//buy - buyFlag is 0 for next index(ind+1) as we already bought at ind
                            0 + getMaxProfit(ind+1,1, prices,n));// not buy -  buyFlag is 1 for next index(ind+1) as we did not buy at ind
        }else{
            profit = Math.max(prices[ind] + getMaxProfit(ind+1, 1, prices,n),//sell - buyFlag is 1 for next index(ind+1) as we sold at ind
                            0 + getMaxProfit(ind+1,0, prices,n));// not sell -  buyFlag is 0 for next index(ind+1) as we did not sell at ind
        }
        return profit;
    }*/

    //Memoization
    //TC = O(n*2)
    //SC = O(n*2) + O(n) - ASS
    /*public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] dp = new int[n][2];// 2 values for buyFlag = 0 and 1
        for(int i = 0; i < n; i++){
            for(int j = 0; j < 2; j++){
                dp[i][j] = -1;
            }
        }
        return getMaxProfit(0,1,prices,n, dp);// buyFlag is always allowed at first index
    }

    public int getMaxProfit(int ind, int buyFlag, int[] prices, int n, int[][] dp) {
        int profit = 0;
        //base case 
        if(ind == n)//no days left - buy sell window is over so no profit at that index
            return 0;

        if(dp[ind][buyFlag] != -1)
            return dp[ind][buyFlag];

        if(buyFlag == 1){//buying allowed - 2 options : buy or not buy
            profit = Math.max(-prices[ind] + getMaxProfit(ind+1, 0, prices,n,dp),
                            0 + getMaxProfit(ind+1,1, prices,n,dp));
        }else{
            profit = Math.max(prices[ind] + getMaxProfit(ind+1, 1, prices,n,dp),
                            0 + getMaxProfit(ind+1,0, prices,n,dp));
        }
        return dp[ind][buyFlag] = profit;
    }*/

    //Tabulation
    //TC = O(n*2)
    //SC = O(n*2)
    /*public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] dp = new int[n+1][2];// 2 values for buyFlag = 0 and 1
        // size = n+1 because dp[n][0/1] in base and dp[ind+1][x] is used in loop so we will get out of bounds exception
        int profit = 0;
        //base case 
        dp[n][0] = dp[n][1] = 0;//no days left - ind == n -  buy sell window is over so no profit at that index

        //bottom up - ind starts from back (n-1)
        //          - buyFlag can be 0 to 1 or 1 to 0
        for(int ind = n-1; ind >= 0; ind--){
            for(int buyFlag = 0; buyFlag <= 1; buyFlag++){
                if(buyFlag == 1){//buying allowed - 2 options : buy or not buy
                    profit = Math.max(-prices[ind] + dp[ind+1][0],
                                    0 + dp[ind+1][1]);
                }else{
                    profit = Math.max(prices[ind] + dp[ind+1][1],
                                    0 + dp[ind+1][0]);
                }
                dp[ind][buyFlag] = profit;
            }
        }
        return dp[0][1];// for 0th index, we buy     
    }*/

    //SO
    //TC = O(n*2)
    //SC = O(2)
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[] next = new int[2];// 2 values for buyFlag = 0 and 1

        int profit = 0;
        //base case
        //dp[n][0] - next[0] - n is next of n-1 from which our ind loop starts in bottom up
        next[0] = next[1] = 0;//no days left - ind == n -  buy sell window is over so no profit at that index

        //bottom up - ind starts from back (n-1)
        //          - buyFlag can be 0 to 1 or 1 to 0
        for(int ind = n-1; ind >= 0; ind--){
            int[] curr = new int[2];
            for(int buyFlag = 0; buyFlag <= 1; buyFlag++){
                if(buyFlag == 1){//buying allowed - 2 options : buy or not buy
                    profit = Math.max(-prices[ind] + next[0],
                                    0 + next[1]);
                }else{
                    profit = Math.max(prices[ind] + next[1],
                                    0 + next[0]);
                }
                curr[buyFlag] = profit;
            }
            next = curr;
        }
        return next[1];// for 0th index, we buy     
    }
}
