/*
* https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/description/
* Type : Only 2 txns allowed (B+S = 1 txn)
* 3 params - 1st for index , 2nd to know if buy is allowed or not, since buy is not allowed if    * sell is not done(except for the first buy), 3rd to know how many txns left
* INTUITION : - Try all ways to buy or sell.
*             - After each buy or sell move to next index(ind+1) and set the buyFlag param(0 or *               1) to signify if buy is allowed or not at ind+1
              - We should reduce txnsLeft only after successful sell
* base - ind == n - no days left - buy sell window is over so no profit at that index
*      - txnsLeft == 0 - no txn limit left(2 here)
*/
//Recursion
//TC = exponential
//SC = O(n)
class Solution {
    /*public int maxProfit(int[] prices) {
        int n = prices.length;
        return getMaxProfit(0,1,2,prices,n);// buyFlag is always allowed at 0th index and 2 txnsLeft
    }

    public int getMaxProfit(int ind, int buyFlag, int txnsLeft, int[] prices, int n) {
        int profit = 0;
        //base case 
        if(ind == n)//no days left - buy sell window is over so no profit at that index
            return 0;
        if(txnsLeft == 0)// txns limit is over
            return 0;

        if(buyFlag == 1){//buying allowed - 2 options : buy or not buy
            profit = Math.max(-prices[ind] + getMaxProfit(ind+1, 0, txnsLeft, prices,n),//buy - txnsLeft is not reduced as txns = buy + sell
                            0 + getMaxProfit(ind+1,1, txnsLeft, prices,n));// not buy -  txnsLeft is not reduced as txns = buy + sell
        }else{
            profit = Math.max(prices[ind] + getMaxProfit(ind+1, 1,txnsLeft-1, prices,n),//sell - txnsLeft is reduced as txns = buy + sell. That means one sells marks the end of one txn
                            0 + getMaxProfit(ind+1,0,txnsLeft, prices,n));// not sell -  txnsLeft is not reduced as txns = buy + sell 
        }
        return profit;
    }*/

    //Memoization
    //TC = O(n*2*3)
    //SC = O(n*2*3) + O(n) - ASS
    /*public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][][] dp = new int[n][2][3];// 2 values for buyFlag = 0 and 1 and 3 values for txnsLeft = 0,1,2
        for(int i = 0; i < n; i++){
            for(int j = 0; j < 2; j++){
                for(int k = 0; k < 3; k++){
                    dp[i][j][k] = -1;
                }
            }
        }
        return getMaxProfit(0,1,2,prices,n, dp);// buyFlag is always allowed at first index and txnsLeft is 2
    }

    public int getMaxProfit(int ind, int buyFlag,int txnsLeft, int[] prices, int n, int[][][] dp){
        int profit = 0;
        //base case 
        if(ind == n)//no days left - buy sell window is over so no profit at that index
            return 0;
        if(txnsLeft == 0)// txns limit is over
            return 0;

         if(dp[ind][buyFlag][txnsLeft] != -1)
            return dp[ind][buyFlag][txnsLeft];

        if(buyFlag == 1){//buying allowed - 2 options : buy or not buy
            profit = Math.max(-prices[ind] + getMaxProfit(ind+1, 0, txnsLeft, prices,n,dp),
                            0 + getMaxProfit(ind+1,1, txnsLeft, prices,n,dp));
        }else{
            profit = Math.max(prices[ind] + getMaxProfit(ind+1, 1,txnsLeft-1, prices,n,dp),
                            0 + getMaxProfit(ind+1,0,txnsLeft, prices,n,dp));
        }
        return dp[ind][buyFlag][txnsLeft] = profit;
    }*/

    //Tabulation
    //TC = O(n*2*3)
    //SC = O(n*2*3)
    /*public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][][] dp = new int[n+1][2][3];// 2 values for buyFlag = 0 and 1 and 3 values for txnsLeft = 0,1,2n

        //base cases - Not required as in dp array, everything will anyway be 0 initially
        //no days left - buy sell window is over so no profit at that index
        // for(int buyFlag = 0; buyFlag < 2 ; buyFlag++){
        //     for(int txnsLeft= 0; txnsLeft < 3; txnsLeft++){
        //         dp[n][buyFlag][txnsLeft] = 0; 
        //     }
        // }
        // // txns limit is over
        // for(int ind = 0; ind < n ; ind++){
        //     for(int buyFlag= 0; buyFlag < 2; buyFlag++){
        //         dp[ind][buyFlag][0] = 0; 
        //     }
        // }

        int profit = 0;
        //bottom up
        for(int ind = n-1; ind >= 0 ; ind--){
            for(int buyFlag= 0; buyFlag < 2; buyFlag++){
                for(int txnsLeft= 1; txnsLeft < 3; txnsLeft++){//start from 1 as in base case we assign 0 when txnsLeft = 0 - dp[ind][buyFlag][0] = 0; - we shouldn’t override that value
                    if(buyFlag == 1){//buying allowed - 2 options : buy or not buy
                        profit = Math.max(-prices[ind] + dp[ind+1][0][txnsLeft],
                                        0 + dp[ind+1][1][txnsLeft]);
                    }else{
                        profit = Math.max(prices[ind] + dp[ind+1][1][txnsLeft-1],
                                        0 + dp[ind+1][0][txnsLeft]);
                    }
                    dp[ind][buyFlag][txnsLeft] = profit;
                }
            }
        }
        return dp[0][1][2];
    }*/


    //SO
    //TC = O(n*2*3)
    //SC = O(2*3)
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] next = new int[2][3];// 2 values for buyFlag = 0 and 1 and 3 values for txnsLeft = 0,1,2n

        //base cases - Not required as in dp array, everything will anyway be 0 initially
        //no days left - buy sell window is over so no profit at that index
        // for(int buyFlag = 0; buyFlag < 2 ; buyFlag++){
        //     for(int txnsLeft= 0; txnsLeft < 3; txnsLeft++){
        //         dp[n][buyFlag][txnsLeft] = 0; 
        //     }
        // }
        // // txns limit is over
        // for(int ind = 0; ind < n ; ind++){
        //     for(int buyFlag= 0; buyFlag < 2; buyFlag++){
        //         dp[ind][buyFlag][0] = 0; 
        //     }
        // }

        int profit = 0;
        //bottom up
        for(int ind = n-1; ind >= 0 ; ind--){
            int[][] curr = new int[2][3];
            for(int buyFlag= 0; buyFlag < 2; buyFlag++){
                for(int txnsLeft= 1; txnsLeft < 3; txnsLeft++){//start from 1 as in base case we assign 0 when txnsLeft = 0 - dp[ind][buyFlag][0] = 0; - we shouldn’t override that value
                    if(buyFlag == 1){//buying allowed - 2 options : buy or not buy
                        profit = Math.max(-prices[ind] + next[0][txnsLeft],
                                        0 + next[1][txnsLeft]);
                    }else{
                        profit = Math.max(prices[ind] + next[1][txnsLeft-1],
                                        0 + next[0][txnsLeft]);
                    }
                    curr[buyFlag][txnsLeft] = profit;
                }
            }
            next = curr;
        }
        return next[1][2];
    }

    //Recursion - 2nd approach - dp[ind][txnsLeft] = dp[N][4]
    //Here buyFlag will be decided based on ind - even = buy and odd = sell
    //Memoization - tabulation - SO can be done
    /*public int maxProfit(int[] prices) {
        int n = prices.length;
        return getMaxProfit(0,0,prices,n);// initially indes = 0 and 0 txns done
    }

    public int getMaxProfit(int ind, int txns, int[] prices, int n) {
        int profit = 0;
        //base case 
        if(ind == n)//no days left - buy sell window is over so no profit at that index
            return 0;
        if(txns == 4)// if txns performed = 4(here txns = BSBS) (no txns left)
            return 0;

        if(txns % 2 == 0 ){//buying allowed - even - 2 options : buy or not buy
        //increment txns for every buy or every sell
            profit = Math.max(-prices[ind] + getMaxProfit(ind+1, txns+1, prices,n),
                            0 + getMaxProfit(ind+1,txns, prices,n));
        }else{
            profit = Math.max(prices[ind] + getMaxProfit(ind+1,txns+1, prices,n),
                            0 + getMaxProfit(ind+1,txns, prices,n));
        }
        return profit;
    }*/
}
