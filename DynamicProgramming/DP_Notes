BASE CASE : 
        whenever recursion is started from n-1, our base case will always be for index 0 - tabulation from 0 to n-1
        whenever recursion is started from 0, our base case will always be for index n - tabulation from n-1 to 0
        
        1D / 2D DP :
                1. reach destination - i = 0 and j = 0
                2. reach boundaries on any side - i < 0 or j < 0
                3. Recursion call from n-1
        DP on Subsequences:
                1. for target == 0 (target base case is written first)
                2. for index == 0
                3. Recursion call from n-1
        Dp on Strings:
                1. for ind1 -ve for s1 => -ve means end of string s1
                2. for ind2 -ve for s2 => -ve means end of string s2
                        s1 gets exhausted or s2 gets exhausted
                3. Recursion call from n-1
        DP on stocks:
                1. Recursion call from 0 (not n-1)
                2. Base : ind == n
                3. cap/txn == n(when required)
                4. base case return 0 - not required for tabulation and SO
                5. For SO, dp[n][0] - next[0] - n is next of n-1 from which our ind loop starts in bottom up
        DP on LIS:
                1. Same approach as other cas be taken but TC will be O(n^2)
                2. Better approach - Binary search
                3. Base: ind == n
                4. Recursion call from f(0,-1) or tabulation with coordinate shift from f(0,-1+1)
        DP on Partition:
                1. base: if i == j, return 0 - steps = stepsFormula + f(i,k)+ f(k+1,j) - call f(1,n-1)
                        tabulation: j cannot cross i (j loop - i+1 to n-1)
                2. base: if i > j, return 0 - cost - costFormula + f(i,k-1) + f(k+1,j) - call f(1,n) - we solve for i == j 
                        also(cut stick, burst balloon,etc)
                        tabulation: j can cross i (j loop - 1 to n)
                3. calculate based on question(steps/cost/etc) + (left sub problem) + (right sub problem) 
                4. Recursion call from f(1,n-1) or f(1,n)
                5. IMP: Figure out where to perform partition.


TC / SC :
1. Recursion 
  TC - Exponential(eg: 2^n) - TLE
  SC - Recursion stack space/ Path length
2. Memoization 
  TC - dp array size 
  SC - dp array size + Recursion stack space/ Path length
3. Tabulation
  TC - dp array size 
  SC - dp array size 
4. Space Optimization - f(n-1) encountered
  TC - dp array size 
  SC - Reduce space to 1D array size or O(1)

DP on Subsequences 
- Take | NotTake
- Always will have parameters - index and target
- f(n-1, target) - In the array till index n-1, does there exist a target
- Loops -
        ind - 1 to n-1
        target - 1 to sum

DP on Strings
- Types - Comparisons, Replaces, Edits
        - Match | notMatch
        - 2 indexes to represent pointers to 2 strings for comparison - ind1 for s1 and ind2 for s2
- Comparisons 
        - match - shrink both strings
        - Do comparison character wise
        - not match - need to be coded based on requirement
- Edits 
        - Same as comparison
        - match - shrink both strings
        - not match - need to be coded for all operations
- Replaces 
        - Same as comparison
        - match - shrink both strings
        - not match - need to be coded based on requirement

Tricks:
- TABULATION LOOP - from base case to the call(call means recursion call)
- IMP : Recursion - f(1,n) -> tabulation - i = n to 1 and j = 1 to n (bottom up)
- if(i<0) or (j<0) check is there, 
        - do a index shifting by increasing index by 1 as dp[-1] cannot be done for tabulation
        - dp[n][m] -> dp[n+1][m+1] - loop will be till i<=n and j <=m
        - i < 0 -> i == 0
        - i >= 0 -> i >0
        - s1[i] -> s[i-1]
        - f(n-1,m-1) -> f(n,m)
        - return dp[n][m]
        - Look for other changes that may be required - can vary from problem to problem
                eg- editDistance (DP on strings) - if(i < 0) return j+1  ->  if(i == 0) return j
- tabulation to SO
        base case - dp[0][x] -> prev[x]
                  - remove dp[x][0] loop from and assign for curr[0] inside 1st loop - eg: dp[i][0] = i --> curr[0] = i
- For SO, imagine 0th row to be prev and 1st row to be curr
- if loop 'ind' loop starts from n-1 and ind+1 is used later, then dp size should be dp[n+1][x] - otherwise 
        out of bounds(n-1 + 1 = n = goes beyond boundary as our index ends at n-1)
- if loop 'ind' loop starts from n-1 and ind+2 is used later, then dp size should be dp[n+2][x] - otherwise 
        out of bounds(n-1 + 2  goes beyond boundary as our index ends at n-1)
- if ind+2 is used, base -> ind >= n - otherwise out of bounds
- Be mindful of out of bounds conditions(in base as well as loops)
- SO -
        dp[n][0] - next[0] - n is next of n-1 from which our ind loop starts in bottom up(DP on stocks)
        dp[i][0] - prev[0] - i(0) is prev 1 from which our i loop starts in bottom up(DP on others)
- Tabulation & SO
        - Be mindful of when to start or end second loop from/at 1st loop index
        - Eg :  i = n-1 to 1 
                j = i+1 to n
        - Eg :  i = 1 to n-1
                j = 0 to i
