package com.practice.trees;

import java.util.ArrayList;
/*
 * 1. addLeftBoundary - go to left boundary nodes and add all excluding leaves
 * 2. addLeaves - Do a tree traversal and add only the leaf nodes	- go to left most node & then go to right most node
 * 					Add only if those are leaves
 * 3. addRightBoundary - go to right boundary nodes and add all excluding leaves (add to a second list as we will need them in reverse order 
 * 						in main list)
 * 
 * Time Complexity: O(N).
 * Reason: The time complexity will be O(H) + O(H) + O(N) which is â‰ˆ O(N)
 * Space Complexity: O(N)
 * Reason: Space is needed for the recursion stack while adding leaves. In the worst case (skewed tree), space complexity can be O(N).
 */
class Node {
    int data;
    Node left, right;
    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}

public class BoundaryTraversal {
	public static void main(String args[]) {

        Node root = new Node(1);
        root.left = new Node(2);
        root.left.left = new Node(3);
        root.left.left.right = new Node(4);
        root.left.left.right.left = new Node(5);
        root.left.left.right.right = new Node(6);
        root.right = new Node(7);
        root.right.right = new Node(8);
        root.right.right.left = new Node(9);
        root.right.right.left.left = new Node(10);
        root.right.right.left.right = new Node(11);

        ArrayList < Integer > boundaryTraversal;
        boundaryTraversal = printBoundary(root);

        System.out.println("The Boundary Traversal is : ");
        for (int i = 0; i < boundaryTraversal.size(); i++) {
            System.out.print(boundaryTraversal.get(i) + " ");
        }

    }
	
	public static ArrayList<Integer> printBoundary(Node root){
		ArrayList<Integer> result = new ArrayList<>();
		if(root == null) {
			return result;
		}
		if(isLeaf(root) == false) {// Add root to main list first before calling other boundary functions
			result.add(root.data);
		}

		addLeftBoundary(root, result);
		addLeaves(root, result);
		addRightBoundary(root, result);
		
		return result;
	}

	private static boolean isLeaf(Node node) {
		if(node.left == null && node.right == null) {
			return true;
		}else {
			return false;
		}
	}
	
	private static void addLeftBoundary(Node root, ArrayList<Integer> result) {
		Node node = root.left;
		
		while(node != null) {
			if(isLeaf(node) == false) {
				result.add(node.data);
			}
			if(node.left != null) {
				node = node.left;
			}else {
				node = node.right;
			}
		}
		
	}
	
	private static void addRightBoundary(Node root, ArrayList<Integer> result) {
		ArrayList<Integer> temp = new ArrayList<>(); // right boundaries need to be added to a different list as we need then in reverse order in main list
		Node node = root.right;
		
		while(node != null) {
			if(isLeaf(node) == false) {
				temp.add(node.data);
			}
			if(node.right != null) {
				node = node.right;
			}else {
				node = node.left;
			}
		}
		
		for(int i = temp.size()-1; i >=0; i--) {
			result.add(temp.get(i));
		}
		
	}
	
	private static void addLeaves(Node root, ArrayList<Integer> result) {
		//Do a tree traversal and add only the leaf nodes	
		if(isLeaf(root)) {
			result.add(root.data);
			return;
		}
		
		if(root.left != null)
			addLeaves(root.left, result);
		if(root.right != null)
			addLeaves(root.right, result);
	}

	
	
}
