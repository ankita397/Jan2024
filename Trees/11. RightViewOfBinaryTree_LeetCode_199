/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 /*
 * Last node at every level will be my right view if we are traversing from left to right
 * First node at every level will be my right view if we are traversing from right to left
 * Here we are using Reverse pre-order traversal - Root -> Right -> Left
 * We rely on the fact that, since we're moving in the right direction first, whichever
 * level we come across, we always need the first node from right side 
 *
 * TC = O(N)
 * SC = O(N)
 */

class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        reversePreOrder(root, 0,result);
        return result;
    }

    private void reversePreOrder(TreeNode node, int level, List<Integer> result){
        if(node == null){
            return;
        }

        //We rely on the fact that, since we're moving in the right direction first, whichever
        //level we come across, we always need the first node from right side 
        if(level == result.size()){
            result.add(node.val);
        }

        reversePreOrder(node.right, level+1, result);
        reversePreOrder(node.left, level+1, result);

    }
}
