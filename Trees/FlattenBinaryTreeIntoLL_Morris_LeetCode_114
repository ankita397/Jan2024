/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 /*
 *
 * Morris traversal used 
 * INTUITION : On the left subtree, connect the last node of preorder to right of root(4 to 5)
 * https://www.youtube.com/watch?v=sWf7k1x9XR4&list=PLJ_vPQ_vraNz90tiB1HNgUWjivW07RcXC&index=25
 * TC = O(N)
 * SC = O(1)
 */ 
class Solution {
    public void flatten(TreeNode root) {
        TreeNode curr = root;
        TreeNode prev = null;
        while (curr != null){
            if(curr.left != null){
                prev = curr.left;
                while(prev.right != null){
                    prev = prev.right;
                }
                prev.right = curr.right;
                curr.right = curr.left;
                curr.left = null;
            }
            curr = curr.right;
        }
    }
}
