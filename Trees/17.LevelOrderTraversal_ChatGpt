import java.util.*;

class TreeNode {
    int val;
    TreeNode left, right;

    TreeNode(int val) {
        this.val = val;
        left = null;
        right = null;
    }
}

public class LevelOrderTraversal {
    public List<List<Integer>> levelOrder(TreeNode root) {
        // List to store the result of the traversal
        List<List<Integer>> result = new ArrayList<>();

        // If the tree is empty, return an empty list
        if (root == null) {
            return result;
        }

        // Queue to facilitate level order traversal
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);

        // Perform BFS
        while (!queue.isEmpty()) {
            // List to store the nodes at the current level
            List<Integer> currentLevel = new ArrayList<>();
            
            // Number of nodes in the current level
            int size = queue.size();

            // Process each node in the current level
            for (int i = 0; i < size; i++) {
                TreeNode currentNode = queue.poll();

                // Add the node's value to the current level list
                currentLevel.add(currentNode.val);

                // Enqueue the left and right children if they exist
                if (currentNode.left != null) {
                    queue.add(currentNode.left);
                }
                if (currentNode.right != null) {
                    queue.add(currentNode.right);
                }
            }

            // Add the current level list to the result
            result.add(currentLevel);
        }

        return result;
    }

    public static void main(String[] args) {
        // Example usage:
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(5);
        root.right.left = new TreeNode(6);
        root.right.right = new TreeNode(7);

        LevelOrderTraversal traversal = new LevelOrderTraversal();
        List<List<Integer>> result = traversal.levelOrder(root);

        // Print the result
        System.out.println(result);
    }
}
