/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 /*
 * Need to find the index of the leftmost and rightmost nodes at each level to get width 
 * WidthOfEachLevel = RightIndex - LeftIndex +1
 * Find the max(WidthOfEachLevel)
 * Index - min(indexesInALevel) - to avoid overflow
 *
 * TC = O(N)
 * SC = O(N)
 *
 */
class Pair{
    TreeNode node;
    int num;
    Pair(TreeNode node, int num){
        this.node = node;
        this.num = num;
    }
}
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        int maxWidth = 0;
        if(root == null){
            return 0;
        }
        Queue<Pair> queue = new LinkedList<>();
        queue.add(new Pair(root,0));

        while(!queue.isEmpty()){
            int size = queue.size();// Required to be stored in a variable for use later
            int minNum = queue.peek().num; // minimum of index in a level - first index in each level
            int first =0;
            int last = 0;
            for(int i = 0; i < size; i++){//loop over all nodes in a level
                TreeNode node = queue.peek().node;
                // Index - min(indexesInALevel) - to avoid overflow
                int curr_id = queue.peek().num - minNum;
                queue.remove();
                if(i == 0){// first index of each level
                    first = curr_id;
                }
                if(i == size-1){// last index of each level
                    last = curr_id;
                }
                if(node.left != null){
                    queue.add(new Pair(node.left, (2 * curr_id) +1));
                }
                if(node.right != null){
                    queue.add(new Pair(node.right, (2 * curr_id) +2));
                }
            }
            //WidthOfEachLevel = RightIndex - LeftIndex +1
            maxWidth = Math.max(maxWidth, last-first+1);
        }
        return maxWidth;
    }
}
