/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 /*
 * Need to find the index of the leftmost and rightmost nodes at each level to get width 
 * WidthOfEachLevel = RightIndex - LeftIndex +1
 * Find the max(WidthOfEachLevel)
 * Index - min(indexesInALevel) - to avoid overflow
 *
 * TC = O(N)
 * SC = O(N)
 *
 */
class Pair{
    TreeNode node;
    int num;
    Pair(TreeNode node, int num){
        this.node = node;
        this.num = num;
    }
}
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
       // Initialize the maximum width to 0
       int maxWidth = 0;
       
       // If the tree is empty, the width is 0
       if (root == null) {
           return 0;
       }
       
       // Use a queue to perform level-order traversal
       // Each element in the queue is a Pair containing the TreeNode and its relative index
       Queue<Pair> queue = new LinkedList<>();
       queue.add(new Pair(root, 0)); // Start with the root node at index 0
   
       // Perform level-order traversal
       while (!queue.isEmpty()) {
           // Get the number of nodes in the current level
           int size = queue.size();
           
           // Get the minimum index in the current level (to normalize indices)
           int minIndex = queue.peek().num; 
           
           // Variables to store the first and last indices of the current level
           int first = 0;
           int last = 0;
   
           // Process all nodes in the current level
           for (int i = 0; i < size; i++) {
               // Get the front node and its index from the queue
               TreeNode node = queue.peek().node;
               int currIndex = queue.peek().num - minIndex; // Normalize the index to prevent overflow
               queue.remove();
   
               // Update the first index (for the first node in the level)
               if (i == 0) {
                   first = currIndex;
               }
               
               // Update the last index (for the last node in the level)
               if (i == size - 1) {
                   last = currIndex;
               }
   
               // Add the left child to the queue with its corresponding index
               if (node.left != null) {
                   queue.add(new Pair(node.left, (2 * currIndex) + 1));
               }
               
               // Add the right child to the queue with its corresponding index
               if (node.right != null) {
                   queue.add(new Pair(node.right, (2 * currIndex) + 2));
               }
           }
   
           // Calculate the width of the current level: (last index - first index + 1)
           maxWidth = Math.max(maxWidth, last - first + 1);
       }
       
       // Return the maximum width found
       return maxWidth;
   }
}
