https://leetcode.com/problems/longest-repeating-character-replacement/description/
//i/p - AABABBA, k = 2
//o/p - 5
//brute force
//Generate all substrings and get the max length
//keep i constant and move j to right 
//Figure out how many chars to convert 
//Look to minimise conversions - in substring AABAB, A is 3 times and B is 2 times - so convert B's to A's - do not change 
//char appraring max no of times
//No of conversions = length - maxFreq(char)

//TC = O(n^2)// O(n*n*1) - O(1) for for accessing array
class Solution {
    public int characterReplacement(String s, int k) {
        int n = s.length();
        int maxLen = 0;
        int maxCharFreq = 0;
        int length = 0;
        for(int i = 0; i < n; i++){
            int freq[] = new int[26];
            for(int j = i; j < n; j++){
                freq[s.charAt(j)-'A']++;// increament freq of character appearing
                length = j-i+1;
                maxCharFreq = Math.max(maxCharFreq,freq[s.charAt(j)-'A']);// find the max occuring character's length in current substring
                //in substring A , maxCharFreq = 1, length = 1 => 1-1 <=k , so maxLen = 1
                //in substring A , maxCharFreq = 2, length = 2 => 2-2 <=k , so maxLen = 2
                //in substring B , maxCharFreq = 2, length = 3 => 3-2 <=k , so maxLen = 3
                //in substring A , maxCharFreq = 3, length = 4 => 4-3 <=k , so maxLen = 4
                //in substring B , maxCharFreq = 3, length = 5 => 5-3 <=k , so maxLen = 4
                //in substring B , maxCharFreq = 3, length = 6 => 6-3 <=k , break - i++
                if(length - maxCharFreq <= k){
                    maxLen = Math.max(maxLen,length);
                }else{
                    break;
                }
            }
        }
        return maxLen;
    }
}

//Better  : Sliding window with 2 pointers

//length is used for validating our condition again and again in a while loop. So re-updating length is needed during shrink.

//TC = O(n+n)
//SC = O(26)
class Solution {
    public int characterReplacement(String s, int k) {
        int n = s.length();
        int maxLen = 0;
        int maxCharFreq = 0;
        int left = 0, right = 0;
        int freq[] = new int[26];
        while(right < n){
            int length = 0;
            freq[s.charAt(right)-'A']++;
            length = right-left+1;
            maxCharFreq = Math.max(maxCharFreq, freq[s.charAt(right)-'A']);
            while(length-maxCharFreq > k){//invalid - so shrink the window by moving left
                freq[s.charAt(left)-'A']--;
                //for(int i = 0; i < 26; i++){
                //  maxCharFreq = Math.max(maxCharFreq, freq[s.charAt(right)-'A']); // this will reduce value of maxCharFreq during shrink
                //}
                // no point in reducing maxCharFreq as it will not give us a better maxLen
                //Eg: AABABBA - substring AABAB - here we already get maxCharFreq = 3 and length = 5 which is the maxLen till now. Now next maxLen will have to 6 or more. It cannot be lesser.
                //So reducing maxCharFreq can never satisfy the the condition length-maxCharFreq <= k . Suppose, we reduce maxCharFreq to 2 after sliding window to substring ABAB, if we need length 6 then 6-2 <= k(2) = false always
                //maxCharFreq = 0;
                left++;
                length = right-left+1;
            }
            if(length - maxCharFreq <= k){// update maxLen when condition satisfies
                maxLen = Math.max(maxLen,length);
            }
            right++;
        }
        return maxLen;
    }
}

//Optimal approach : Sliding window with 2 pointers 
//while (length-maxCharFreq > k) -> if(length-maxCharFreq > k)
//length is used for validating our condition on once here. So re-updating length is not needed during shrink.

//TC = O(n)
//SC = O(26)

class Solution {
    public int characterReplacement(String s, int k) {
        int n = s.length();
        int maxLen = 0;
        int maxCharFreq = 0;
        int left = 0, right = 0;
        int freq[] = new int[26];
        while(right < n){
            int length = 0;
            freq[s.charAt(right)-'A']++;
            length = right-left+1;
            maxCharFreq = Math.max(maxCharFreq, freq[s.charAt(right)-'A']);
            if(length-maxCharFreq > k){//invalid - so shrink the window by moving left
                freq[s.charAt(left)-'A']--;
                //for(int i = 0; i < 26; i++){
                //  maxCharFreq = Math.max(maxCharFreq, freq[s.charAt(right)-'A']); // this will reduce value of maxCharFreq during shrink
                //}
                // no point in reducing maxCharFreq as it will not give us a better maxLen
                //Eg: AABABBA - substring AABAB - here we already get maxCharFreq = 3 and length = 5 which is the maxLen till now. Now next maxLen will have to 6 or more. It cannot be lesser.
                //So reducing maxCharFreq can never satisfy the the condition length-maxCharFreq <= k . Suppose, we reduce maxCharFreq to 2 after sliding window to substring ABAB, if we need length 6 then 6-2 <= k(2) = false always
                //maxCharFreq = 0;
                left++;
            }
            if(length - maxCharFreq <= k){// update maxLen when condition satisfies
                maxLen = Math.max(maxLen,length);
            }
            right++;
        }
        return maxLen;
    }
}

ChatGPT explanation for optimal
class Solution {
    public int characterReplacement(String s, int k) {
        // Get the length of the input string `s`
        int n = s.length();

        // Variable to store the maximum length of the valid substring
        int maxLen = 0;

        // Variable to track the frequency of the most frequent character in the current window
        int maxCharFreq = 0;

        // Two pointers for sliding window: `left` is the start, `right` is the end of the window
        int left = 0, right = 0;

        // Array to store the frequency of each character (assuming all uppercase letters A-Z)
        int freq[] = new int[26];

        // Traverse the string using the right pointer (sliding window)
        while (right < n) {
            // Increment the frequency of the current character at `right`
            freq[s.charAt(right) - 'A']++;

            // Calculate the current window length
            int length = right - left + 1;

            // Update `maxCharFreq` to the highest frequency of any character in the window
            maxCharFreq = Math.max(maxCharFreq, freq[s.charAt(right) - 'A']);

            // Check if the number of replacements needed to make all characters the same in the current window exceeds `k`
            // If the window is invalid, shrink it by moving the `left` pointer
            if (length - maxCharFreq > k) {
                // Decrease the frequency of the character at `left` as we are shrinking the window
                freq[s.charAt(left) - 'A']--;
                left++;  // Slide the window by moving the left pointer
            }

            // If the window is valid (i.e., the number of changes needed <= k), update `maxLen`
            if (length - maxCharFreq <= k) {
                // Update `maxLen` to the maximum of the current length and the previous maximum length
                maxLen = Math.max(maxLen, length);
            }

            // Move the `right` pointer to expand the window
            right++;
        }

        // Return the maximum length of the valid substring
        return maxLen;
    }
}
