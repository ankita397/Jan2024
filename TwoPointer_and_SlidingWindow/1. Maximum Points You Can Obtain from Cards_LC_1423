//https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards/
//Input: cardPoints = [1,2,3,4,5,6,1], k = 3
Output: 12
Explanation: After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. 
The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12.

//window1 => lsum = 6, rsum = 0 - sum = 6
//window2 => lsum = 3, rsum = 1 - sum = 4
//window3 => lsum = 1, rsum = 7 - sum = 8
//window4 => lsum = 0, rsum = 12 - sum = 12

//maxSum = 12

//TC = O(2*k) ~ O(k)
//SC = O(1)
class Solution {
    public int maxScore(int[] cardPoints, int k) {
        int lsum = 0, rsum = 0;
        int maxSum = 0;
        for(int i = 0; i < k; i++){//sum for 1st window only
            lsum = lsum + cardPoints[i];
        } 
        maxSum = lsum;// initial maxSum will be sum of 1st window elements
        int r_index = cardPoints.length-1;
        for(int i = k-1; i >=0; i--){//shrink window from left
            lsum = lsum - cardPoints[i];
            rsum = rsum + cardPoints[r_index];
            r_index--;//expand window from right
            maxSum = Math.max(maxSum, lsum+rsum);
        }
        return maxSum;
    }
}
