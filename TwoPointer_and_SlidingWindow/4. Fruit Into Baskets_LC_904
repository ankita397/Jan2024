https://leetcode.com/problems/fruit-into-baskets/description/ 

- 2 baskets
- each basket can contain only 1 type of fruit
- once we start picking fruits from one tree, you cannot skip any trees in between => this means we have to pick from consecutive trees only.

Rephrase question as -> Find the maximum length of subarray woth at most 2 types of numbers.

Input: fruits = [0,1,2,2]
Output: 3
Explanation: We can pick from trees [1,2,2].
If we had started at the first tree, we would only pick from trees [0,1].


//brute force - Generate all subsarrays

//TC = O(n*n*1) - 2 loops and 1 set which can have max 3 as size - so set.add - O(log 3) ~ O(1)
//TC = O(n^2)
//SC = O(3)

class Solution {
    public int totalFruit(int[] fruits) {
        int maxLen = 0;
        for(int i = 0; i < fruits.length; i++){
            Set<Integer> set = new HashSet<Integer>();
            for(int j = i; j < fruits.length; j++){
                set.add(fruits[j]);
                if(set.size() <=2){
                    maxLen = Math.max(maxLen, j-i+1);
                }else{
                    break;
                }
            }
        }
        return maxLen;
    }
}

//The set works in the brute force approach because you're building the set for every subarray from scratch and checking if you exceed 
two distinct fruits. However, the set doesn't work in a dynamic sliding window approach because it lacks the ability to track 
the frequency of fruit types, which is essential for correctly adjusting the window size when needed.

//Better - shrink and expand
//TC = O(n+n) = O(2n) 1 outer while loop takes O(n) and inner while loop takes total O(n) as it does not move always
//SC = O(3)

class Solution {
    public int totalFruit(int[] fruits) {
        int left = 0, right = 0;
        int maxLen = 0;
        //int[] freq = new int[10]; - array cannot be used since  fruit types are represented as arbitrary integers in the input array, which could range from 0 to any large number.
        //Set<Integer> set = new HashSet<Integer>();// Set does not track the number of occurrences of each type of fruit—it only keeps distinct elements. Also, when removing from the set, you might prematurely remove a type of fruit that still exists in the current window.
        Map<Integer,Integer> map = new HashMap<Integer,Integer>();
        while(right < fruits.length){
            map.put(fruits[right], map.getOrDefault(fruits[right], 0)+1); // add the element to map with size 1 for the first occurrence
            while(map.size() > 2){ // invalic condition - shrink the window
                map.put(fruits[left], map.get(fruits[left])-1); // remove the left most from map
                if(map.get(fruits[left]) == 0){// if the left most element's freq becomes 0, the remove it ffom the map - we need the size of map later so this step is important
                    map.remove(fruits[left]);
                }
                left++;
            }
            if(map.size() <= 2){
                maxLen = Math.max(maxLen, right-left+1);
            }
            right++;  
        } 
        return maxLen;
    }
}

//Optimal - shrink only once for invalid
//TC = O(n)
//SC = O(3)

class Solution {
    public int totalFruit(int[] fruits) {
        int left = 0, right = 0;
        int maxLen = 0;
        //int[] freq = new int[10]; - array cannot be used since  fruit types are represented as arbitrary integers in the input array, which could range from 0 to any large number.
        //Set<Integer> set = new HashSet<Integer>();// Set does not track the number of occurrences of each type of fruit—it only keeps distinct elements. Also, when removing from the set, you might prematurely remove a type of fruit that still exists in the current window.
        Map<Integer,Integer> map = new HashMap<Integer,Integer>();
        while(right < fruits.length){
            map.put(fruits[right], map.getOrDefault(fruits[right], 0)+1); // add the element to map with size 1 for the first occurrence
            if(map.size() > 2){ // invalic condition - shrink the window
                map.put(fruits[left], map.get(fruits[left])-1); // remove the left most from map
                if(map.get(fruits[left]) == 0){// if the left most element's freq becomes 0, the remove it ffom the map - we need the size of map later so this step is important
                    map.remove(fruits[left]);
                }
                left++;
            }
            if(map.size() <= 2){
                maxLen = Math.max(maxLen, right-left+1);
            }
            right++;  
        } 
        return maxLen;
    }
}
