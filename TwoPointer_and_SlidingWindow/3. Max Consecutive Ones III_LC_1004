https://leetcode.com/problems/max-consecutive-ones-iii/description/
Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.

//Brute Force 
//generate all subarrays
//Increment zeroCount when 0 is encountered
//update maxLen when condition is valid else break inner loop and start generating subarrays 
//from the next index(i = 0,1,...)

TC = O(n^2)
SC = O(1)

class Solution {
    public int longestOnes(int[] nums, int k) {
        int maxLen = 0;
        for(int i = 0; i < nums.length; i++){
            int zeroCount = 0;
            for(int j = i; j < nums.length; j++){
                if(nums[j] == 0){
                    zeroCount++;
                }
                if(zeroCount <= k){
                    maxLen = Math.max(maxLen, j-i+1);
                }else{
                    break;
                }
            }
        }
        return maxLen;
    }
}

//Better - Two pointer & sliding window

//TC = O(2n) => O(n)+O(n) -> O(n) for while for right & O(n) because the inner while can go max till length since left does not move always.
//SC = O(1)
class Solution {
    public int longestOnes(int[] nums, int k) {
        int maxLen = 0;
        int left = 0,right = 0;
        int zeroCount = 0;
        while(right < nums.length){
            if(nums[right] == 0){
                zeroCount++;
            }
            while(zeroCount > k){ //keep shrinking till condition is invalid
                if(nums[left] == 0){//reduce zeroCount if left index has 0
                    zeroCount--;
                }  
                left++;
            }
            if(zeroCount <= k){// valid condition
                maxLen = Math.max(maxLen, right-left+1);
            }
            right++;
        }
        return maxLen;
    }
}

//Optimal - This is only possible if maxLen or minLen is asked and not the substring or subarray
//shrink on once each time condition is invalid - this lets us maintain the maxLen which we already got since we don't keep shrinking
//Since we are interested only in maxLen, we don't care about the substring or position of left and right

//TC = O(n)
//SC = O(1)

class Solution {
    public int longestOnes(int[] nums, int k) {
        int maxLen = 0;
        int left = 0,right = 0;
        int zeroCount = 0;
        while(right < nums.length){
            if(nums[right] == 0){
                zeroCount++;
            }
            if(zeroCount > k){ //shrink on once each time condition is invalid
                if(nums[left] == 0){//reduce zeroCount if left index has 0
                    zeroCount--;
                }  
                left++;
            }
            if(zeroCount <= k){//valid condition
                maxLen = Math.max(maxLen, right-left+1);
            }
            right++;
        }
        return maxLen;
    }
}
