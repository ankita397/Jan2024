https://leetcode.com/problems/max-consecutive-ones-iii/description/
Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.

//Brute Force 
//generate all subarrays
//Increment zeroCount when 0 is encountered
//update maxLen when condition isvalid else break inner loop and start generating subarrays 
//from the next index(i = 0,1,...)

TC = O(n^2)
SC = O(1)

class Solution {
    public int longestOnes(int[] nums, int k) {
        int maxLen = 0;
        for(int i = 0; i < nums.length; i++){
            int zeroCount = 0;
            for(int j = i; j < nums.length; j++){
                if(nums[j] == 0){
                    zeroCount++;
                }
                if(zeroCount <= k){
                    maxLen = Math.max(maxLen, j-i+1);
                }else{
                    break;
                }
            }
        }
        return maxLen;
    }
}
