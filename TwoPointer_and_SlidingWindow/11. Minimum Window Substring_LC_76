https://leetcode.com/problems/minimum-window-substring/description/
//i/p - s = ddaaabbca , t = abc
//o/p - bca

//NOTE : Sliding Window problem where output is a string(not length), always keep srack of the starting index.


//brute force
//Generate all substrings and get the max length
//keep i constant and move j to right 
//Count and store frequency of characters in 't'.
//Start expanding window by moving j to right and increment match count if the value of that character's freq is positive
//decrement freq
//if count == length of t - valid substring => check if it has min length and update minLen accordingly. Keep trach of startingIndex 

//TC = O(n^2)// O(n*n*1) - O(1) for for accessing array
//SC = O(128)// considering all alphabets 

class Solution {
    public String minWindow(String s, String t) {
        int minLen = Integer.MAX_VALUE;  // Track the length of the smallest window
        int sLen = s.length();  // Length of string s
        int tLen = t.length();  // Length of string t
        int startingIndex = -1;  // Start index of the smallest window

        // Try starting a window from each position in s
        for (int i = 0; i < sLen; i++) {
            int[] freqT = new int[128];  // Frequency count for characters in t
            int count = 0;  // Track how many characters of t are matched

            // Fill the frequency array with characters in t
            for (int k = 0; k < tLen; k++) {
                freqT[t.charAt(k)]++; // Inserting chars from t into the map means increasing freq
            }

            // Expand the window by including characters from s
            for (int j = i; j < sLen; j++) {
                // If the current character in s is needed (exists in t), increase the match count
                if (freqT[s.charAt(j)] > 0) { // positive freq means we found a match
                    count++;  // We've matched one more character of t
                }
                freqT[s.charAt(j)]--;  // Reduce the frequency of the current character(index j char) in s - do this for all chars in s

                // If all characters from t are matched
                if (count == tLen) {
                    int length = j - i + 1;  // Calculate window length
                    if (length < minLen) {  // Update smallest window
                        minLen = length;
                        startingIndex = i;
                    }
                    break;  // Stop once a valid window is found
                }
            }
        }

        // Return the smallest window or an empty string if no window was found
        String minWindowStr = (startingIndex == -1) ? "" : s.substring(startingIndex, startingIndex + minLen);
        return minWindowStr;
    }
}

//Optimal approach : Sliding window with 2 pointers

//TC = O(n)
//SC = O(128)

class Solution {
    public String minWindow(String s, String t) {
        int minLen = Integer.MAX_VALUE;  // Track the length of the smallest window
        int sLen = s.length();  // Length of string s
        int tLen = t.length();  // Length of string t
        int startingIndex = -1;  // Start index of the smallest window
        int[] freqT = new int[128];  // Frequency count for characters in t
        int left = 0, right = 0;  // Pointers for the sliding window
        int matchCount = 0;  // Count of matched characters

        // Store frequency of characters in t
        for(int i = 0; i < tLen; i++){
            freqT[t.charAt(i)]++;
        }

        // Expand the window by moving the right pointer
        while(right < sLen){
            // If the character encountered is needed or can be part of substring (positive frequency)
            if(freqT[s.charAt(right)] > 0) {
                matchCount++;  // Increment match count
            }
            freqT[s.charAt(right)]--;  // Decrease the frequency for the current character in s

            // Try to contract the window when we have all characters matched
            while(matchCount == tLen) {
                int length = right - left + 1;  // Calculate the current window length
                if(length < minLen) {  // Update minimum length if needed
                    minLen = length;
                    startingIndex = left;  // Update starting index of the minimum window
                }

                //We got a valid window but we need a minimum window, so we start shrinking our window

                // Try to shrink the window from the left
                freqT[s.charAt(left)]++;  // Increment frequency for the character at left as we encounter it in s while shrinking from left
                if(freqT[s.charAt(left)] > 0) {  // Freq becomes positive means this character is still needed but we are removing it while shrinking
                    matchCount--;  // Decrease match count since we removed this character
                }
                left++;  // Move the left pointer to the right
            }
            right++;  // Move the right pointer to the right
        }

        // Return the minimum window substring or an empty string if no window found
        String minWindowStr = (startingIndex == -1) ? "" : s.substring(startingIndex, startingIndex + minLen);
        return minWindowStr;
    }
}
