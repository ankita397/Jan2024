https://leetcode.com/problems/subarrays-with-k-different-integers/description/

//Brute Force
//TC = O(n^2) or O(n^2 log n)
//SC = O(n)

class Solution {
    public int subarraysWithKDistinct(int[] nums, int k) {
        int count = 0;
        int len = nums.length;
        for(int i = 0; i < len; i++){
            Map<Integer, Integer> freqMap = new HashMap<Integer, Integer>();
            for(int j = i; j < len; j++){
                freqMap.put(nums[j], freqMap.getOrDefault(nums[j],0)+1);
                if(freqMap.size() == k){
                    count = count + 1;
                }
                if(freqMap.size() > k){
                    break;
                }               
            }
        }
        return count;
    }
}

//Optimal - Two pointer and sliding window

