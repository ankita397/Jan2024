https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/ - Premium 
https://www.geeksforgeeks.org/problems/longest-k-unique-characters-substring0853/1 - Similar

//Brute Force

TC = O(n^2)* log 26 - assuming max size map (containing all lowercase alphabets) - may change acc to question
SC = O(26) - for map store
class Solution {
    public int longestkSubstr(String s, int k) {
        int n = s.length();
        int maxLen = -1; // Initialize to -1, since no valid substring might exist // can initialize to 0 for at most k

        // Iterate over every starting index i
        for (int i = 0; i < n; i++) {
            Map<Character, Integer> freqMap = new HashMap<>(); // Can use set as well
            
            // For each i, expand the substring by increasing j
            for (int j = i; j < n; j++) {
                char c = s.charAt(j);
                freqMap.put(c, freqMap.getOrDefault(c, 0) + 1);

                // Check the number of distinct characters
                if (freqMap.size() > k) {
                    break; // Too many distinct characters, stop this substring
                }

                // If exactly k distinct characters, update maxLen
                if (freqMap.size() == k) { //   if (freqMap.size() <= k)  for at most
                    maxLen = Math.max(maxLen, j - i + 1);
                }
            }
        }
        
        return maxLen;
    }
}

//Better - sliding window and two pointer
//TC = O(n+n) 
//SC = O(26) ~ O(1)
class Solution {
    public int longestkSubstr(String s, int k) {
        int len = s.length();
        int maxLen = -1;
        Map<Character,Integer> freqMap = new HashMap<Character,Integer>();
        int left = 0, right = 0;
        while(right < len){
            char c = s.charAt(right);
            freqMap.put(c, freqMap.getOrDefault(c, 0) + 1);
            while(freqMap.size() > k){ // invalid - shrink - // Shrink the window until we have exactly k distinct characters
                freqMap.put(s.charAt(left), freqMap.get(s.charAt(left)) - 1);
                if(freqMap.get(s.charAt(left)) == 0){
                    freqMap.remove(s.charAt(left));
                }
                left++;
            }
            // If we have exactly k distinct characters, update the maximum length
            if(freqMap.size() == k){
                maxLen = Math.max(maxLen, right-left+1);
            }
        right++;
        }
        return maxLen;
    }
}

//Optimal - sliding window and two pointer - shrink only once
//while(freqMap.size() > k) ----> if(freqMap.size() > k)
//TC = O(n) 
//SC = O(26) ~ O(1)
class Solution {
    public int longestkSubstr(String s, int k) {
        int len = s.length();
        int maxLen = -1;
        Map<Character,Integer> freqMap = new HashMap<Character,Integer>();
        int left = 0, right = 0;
        while(right < len){
            char c = s.charAt(right);
            freqMap.put(c, freqMap.getOrDefault(c, 0) + 1);
            if(freqMap.size() > k){ // invalid - shrink - // Shrink the window until we have exactly k distinct characters
                freqMap.put(s.charAt(left), freqMap.get(s.charAt(left)) - 1);
                if(freqMap.get(s.charAt(left)) == 0){
                    freqMap.remove(s.charAt(left));
                }
                left++;
            }
            // If we have exactly k distinct characters, update the maximum length
            if(freqMap.size() == k){
                maxLen = Math.max(maxLen, right-left+1);
            }
        right++;
        }
        return maxLen;
    }
}
