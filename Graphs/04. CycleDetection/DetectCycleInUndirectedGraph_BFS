package com.practice.graph2.bfs;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

/*
 * Use BFS for adjacencyList
 * Pair - stores the current node and its parent. parent = -1 for source node
 * parent != it - return true only if the current node visited and is not its own parent
 * Time Complexity: O(N + 2E) + O(N), Where N = Nodes, 2E is for total degrees as we traverse all adjacent nodes.
 * Space Complexity: O(N) + O(N) ~ O(N), Space for queue data structure and visited array.
 * 
 */
public class DetectCycleInUndirectedGraph_BFS {

	public static void main(String[] args) {
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < 4; i++) {
            adj.add(new ArrayList < > ());
        }
        adj.get(1).add(2);
        adj.get(2).add(1);
        adj.get(2).add(3);
        adj.get(3).add(2);
        adj.get(3).add(1);
                
        DetectCycleInUndirectedGraph_BFS det = new DetectCycleInUndirectedGraph_BFS();
		System.out.println(det.isCycle(4, adj));	
	}
	
	private boolean detectCycle(ArrayList<ArrayList<Integer>> adjList,boolean[] vis, int src) {
		Queue<Pair3> queue = new LinkedList<>();
		queue.add(new Pair3(src, -1));//store source element and its parent = -1
		vis[src] = true;// visited
		
		while(!queue.isEmpty()) {
			int node = queue.peek().node;
			int parent = queue.peek().parent;
			queue.remove();
			
			for(Integer it:adjList.get(node)) {
				if(vis[it] == false) {
					vis[it] = true;
					queue.add(new Pair3(it,node));
				}else if(parent != it) {// if adjacent node is visited and is not its own parent node - this means it was visited by someone else.
					//So its a repeating node, confirming a cycle
					return true;
				}
			}
		}
		return false;
	}

	//This is done because the graph may be made of connected components
	//So we call detectCycle for all the nodes so that starting of each connected graph is taken
	public boolean isCycle(int len,ArrayList<ArrayList<Integer>> adjList) {
		
		boolean[] vis = new boolean[len];
		
		for(int i = 0; i < len; i++) {
			if(!vis[i]) {
				if(detectCycle(adjList, vis, i)) {
					return true;
				}
			}
		}	
		return false;
	}
}

class Pair3{// stores the current node and its parent. parent = -1 for source node
	int node;
	int parent;
	Pair3(int node, int parent){
		this.node = node;
		this.parent = parent;
	}
}
