package com.practice.graph2.dfs;

import java.util.ArrayList;

/*
* Use DFS - recursion
* INTUITION : we start from a source and go in-depth, and reach any node that has been previously visited in the past; it means thereâ€™s a cycle.
* Call dfs for src and adj nodes and if any of the dfs calls returns true, then we keep on returning true as cycle has been detected
* parent != it - return true only if the current node visited and is not its  parent
* Time Complexity: O(N + 2E) + O(N), Where N = Nodes, 2E is for total degrees as we traverse all adjacent nodes. In the case of connected components of a graph, it will take another O(N) time.
* Space Complexity: O(N) + O(N) ~ O(N), Space for recursive stack space and visited array.* 
*/
public class DetectCycleInUndirectedGraph_DFS {

	public static void main(String[] args) {
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < 4; i++) {
            adj.add(new ArrayList < > ());
        }
        adj.get(1).add(2);
        adj.get(2).add(1);
        adj.get(2).add(3);
        adj.get(3).add(2);
        adj.get(3).add(1);
                
        DetectCycleInUndirectedGraph_DFS det = new DetectCycleInUndirectedGraph_DFS();
		System.out.println(det.isCycle(4, adj));	

	}
	
	private boolean dfs(ArrayList<ArrayList<Integer>> adj, boolean[] vis, int node, int parent) {
		vis[node] = true;
		for(int adjecentNode : adj.get(node)) {
			if(!vis[adjecentNode]) {
				if(dfs(adj,vis,adjecentNode, node)) {// node is parent of adjecentNode
					return true; // if any of the dfs calls returns true, then we keep on returning true as cycle has been detected
				}
			}
			else if(parent != adjecentNode) {
				return true;
			}
		}
		return false;
	}

	//For connected components of graph
	public boolean isCycle(int len, ArrayList<ArrayList<Integer>> adj) {
		boolean[] vis = new boolean[len];
				
		for(int i = 0; i < len; i++) {
			if(vis[i] == false) {
				if(dfs(adj,vis,i, -1)) {// node is parent of adjecentNode
					return true;
				}
			}
		}
		return false;
	}

}
