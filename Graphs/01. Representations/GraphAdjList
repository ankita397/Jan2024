package com.practice.graph2;

import java.util.ArrayList;

/*
 * This is for undirected unweighted graph representation using Adjacency List
 * n => nodes, m = edges
 * ArrayList<ArrayList<Integer>> is used
 * 
 * adjList.get(firstNode).add(secondNode);
   adjList.get(secondNode).add(firstNode);
 * 
 * For directed unweighted graph - adjList.get(firstNode).add(secondNode) only
 * 
 * SC = O(2m) - so used for only smaller graphs
 * 
 * 
 * For weighted graph, for example for node4, store  4 -> {(2, edgeWt of 4 & 2), (3,edgeWt of 4 & 3), (5,edgeWt of 4 & 5)}
 * 
 */
public class GraphAdjList {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		  int n = 5, m = 6;
		  ArrayList<ArrayList<Integer>> adjList = new ArrayList<ArrayList<Integer>>();
		  for(int i = 0; i <= n; i++) {
			  adjList.add(new ArrayList<Integer>());
		  }
		  
		  addUndirectedEdge(adjList, 1,2);
		  addUndirectedEdge(adjList, 1,3);
		  addUndirectedEdge(adjList, 2,4);
		  addUndirectedEdge(adjList, 2,5);
		  addUndirectedEdge(adjList, 3,4);
		  addUndirectedEdge(adjList, 4,5);
		  
		  for(int i = 0; i <= n; i++) {
			  for(int j = 0; j < adjList.get(i).size(); j++) {
				  System.out.print(i + " -> "+ adjList.get(i).get(j)+ " ");
			  }
			  System.out.println(" ");
		  }
	}
	
	
	private static void addUndirectedEdge(ArrayList<ArrayList<Integer>> adjList, int firstNode, int secondNode) {
		adjList.get(firstNode).add(secondNode);
		adjList.get(secondNode).add(firstNode);
	}

}
