package com.practice.graph2.bfs;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

public class CourseSchedule_Topo {

	public static void main(String[] args) {

//		int n = 4, m = 3;
//		int[][] prerequisitesArr = {{1, 0},
//				               {2, 1},
//				               {3, 2}};
//		
//		for(int i=0;i < prerequisitesArr.length;i++) {
//	  		for(int j=0;j < prerequisitesArr[0].length;j++) {
//	  			System.out.print(prerequisitesArr[i][j] + " ");
//	  		}
//	  		System.out.println();	  	
//	      }	
//		
//		ArrayList<ArrayList<Integer>> prerequisitesAdjList = new ArrayList<>();
//		
//		for(int i = 0; i < prerequisitesArr.length; i++) {
//			prerequisitesAdjList.add(new ArrayList<Integer>());
//		}
//		
//		for (int[] prereq : prerequisitesArr) {
//            int course = prereq[1];
//            int prerequisiteCourse = prereq[0];
//            System.out.println(course+ " -- "+ prerequisiteCourse);
//            
//            prerequisitesAdjList.get(course).add(prerequisiteCourse);
//        }
//
//		
//		for (int v = 0; v < prerequisitesAdjList.size(); v++) {
//            System.out.print(v);
//            for (Integer u : prerequisitesAdjList.get(v)) {
//                System.out.print(" -> " + u);
//            }
//            System.out.println();
//        }
//		
//		int[] ans = CourseSchedule_Topo.findOrder(n, m, prerequisitesAdjList);
//
//        for (int task : ans) {
//            System.out.print(task + " ");
//        }
//        System.out.println("");
		
		int N = 4;
        int M = 3;
        ArrayList<ArrayList<Integer>> prerequisitesAdjList = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            prerequisitesAdjList.add(i, new ArrayList<>());
        }


        prerequisitesAdjList.get(0).add(0);
        prerequisitesAdjList.get(0).add(1);

        prerequisitesAdjList.get(1).add(1);
        prerequisitesAdjList.get(1).add(2);

        prerequisitesAdjList.get(2).add(2);
        prerequisitesAdjList.get(2).add(3);
        
        for (int v = 0; v < prerequisitesAdjList.size(); v++) {
          System.out.print(v);
          for (Integer u : prerequisitesAdjList.get(v)) {
              System.out.print(" -> " + u);
          }
          System.out.println();
      }

        int[] ans = CourseSchedule_Topo.findOrder(N, M, prerequisitesAdjList);

        for (int task : ans) {
            System.out.print(task + " ");
        }
        System.out.println("");
	}
	
	static int[] findOrder(int n, int m, ArrayList<ArrayList<Integer>> prerequisites) 
    {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();
        for(int i = 0; i < n; i++){
            adj.add(new ArrayList<Integer>());
        }
        
        for(int i = 0; i < m; i++){
            // 2nd element is added to the first one
            adj.get(prerequisites.get(i).get(1)).add(prerequisites.get(i).get(0));
        }
        
        int[] indegree = new int[n];
        for(int i = 0; i < n; i++){
            for(int it:adj.get(i)){
                indegree[it]++;
            }
        }
        
        int[] orderedArray = new int[n];
        
        orderedArray = bfs(adj,indegree,n);
        
        return orderedArray;
    }
    
    private static int[] bfs(ArrayList<ArrayList<Integer>> adj, int[] indegree, int n){
        Queue<Integer> queue = new LinkedList();
        int[] orderedArray = new int[n];
        
        for(int i = 0; i < n; i++){
            if(indegree[i] == 0){
                queue.add(i);
            }   
        }
        
        int i = 0;
        while(!queue.isEmpty()){
            int node = queue.peek();
            queue.remove();
            
            orderedArray[i++] = node;
            
            for(int it:adj.get(node)){
                indegree[it]--;
                if(indegree[it] == 0){
                    queue.add(it);
                }   
            }
        }
        if (i == n) 
            return orderedArray;
        
        int[] arr = {};    
        return arr;        
        
    }
}
