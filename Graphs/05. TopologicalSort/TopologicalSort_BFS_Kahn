package com.practice.graph2.bfs;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
/*
 * Topological sorting means linear ordering of vertices such that if there is an edge between two vertices u to v, 
 * u appears before v in the linear order
 * Only valid in DAGs
 * 
 * Topo sort array - Add elements whose indegree is 0
 * Use indegree array and decrement the indegree of an element once the node is added to topo sort
 *  
 * Time Complexity: O(V+E), where V = no. of nodes and E = no. of edges. This is a simple BFS algorithm.
 * Space Complexity: O(N) + O(N) ~ O(2N), O(N) for the indegree array, and O(N) for the queue data structure used in 
 * BFS(where N = no.of nodes).
 */
public class TopologicalSort_BFS_Kahn {

	public static void main(String[] args) {
        int V = 6;
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        adj.get(2).add(3);
        adj.get(3).add(1);
        adj.get(4).add(0);
        adj.get(4).add(1);
        adj.get(5).add(0);
        adj.get(5).add(2);

        int[] ans = TopologicalSort_BFS_Kahn.topoSort(V, adj);
        for (int node : ans) {
            System.out.print(node + " ");
        }
        System.out.println("");
    }

	public static int[] topoSort(int v, ArrayList<ArrayList<Integer>> adj) {
		int[] indegree = new int[v];
		int[] orderedArray = new int[v];
		
		for(int i = 0; i < v; i++) {
			for(int it : adj.get(i)) {
				indegree[it]++;
			}
		}
		
		orderedArray = bfs(adj, indegree, v);
		
		return orderedArray;
	}

	private static int[] bfs(ArrayList<ArrayList<Integer>> adj, int[] indegree, int v) {
		int[] orderedArray = new int[v]; 
		Queue<Integer> queue = new LinkedList<>();
		
		for(int i = 0; i < v; i++) {
			if(indegree[i] == 0) {
				queue.add(i); // add all initial elements whose indegree is 0
			}
		}
		
		int i = 0;
		while(!queue.isEmpty()) {
			int node = queue.peek();
			queue.remove();
			
			orderedArray[i++] = node; // add to topo sort array
			
			
			//since the node is in the topo sort already, we need to remove it from the indegree array
			for(int it : adj.get(node)) {
				indegree[it]--;
				if(indegree[it] == 0) {
					queue.add(it);
				}
			}
		}
		
		return orderedArray;
	}

}
