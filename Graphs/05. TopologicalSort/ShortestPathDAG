package com.practice.graph2.dfs;

import java.util.ArrayList;
import java.util.Stack;

/*
 * GFG
 * 
 * 1. create adjacency list
 * 2. add adjacent node, weight to each node for all edges
 * 3. created visited array
 * 4. create stack to store the topo sort order
 * 5. call topoSort for all components(stating elements) is not visited
 * 6. write topoSort method(dfs) to mark visted as 1, call topoSort recursively(dfs) and push the node to stack
 * 7. once the sorted array is with you, relax the edge distances
 * 8. mark dist[src] = 0;// distance of source to itself = 0
 * 9. assign all distances to max or infinity
 * 10. till stack is not empty, get the node from it, and read all its adjacent nodes and edge weights
 * 11.if(dist[node] + wt < dist[v]) 
 * 			dist[v] = dist[node] + wt;
 * 
 * 
 * Time Complexity: O(N+M) {for the topological sort} + O(N+M) {for relaxation of vertices, each node and its adjacent nodes get traversed} ~ O(N+M).
 * Where N= number of vertices and M= number of edges.
 * Space Complexity:  O( N) {for the stack storing the topological sort} + O(N) {for storing the shortest distance for each node} + O(N) {for the visited array} + O( N+2M) {for the adjacency list} ~ O(N+M) .
 */
public class ShortestPathDAG {

	public static void main(String[] args) {
		int n = 6, m = 7;// n = nodes, m = edges
	    int[][] edge = {{0,1,2},{0,4,1},{4,5,4},{4,2,2},{1,2,3},{2,3,6},{5,3,1}};
	    ShortestPathDAG obj = new ShortestPathDAG();
	    int res[] = obj.shortestPath(n, m, edge);
	    for (int i = 0; i < n; i++) {
	      System.out.print(res[i] + " ");
	    }
	    System.out.println();
	}

	public int[] shortestPath(int n, int m, int[][] edge) {
		ArrayList<ArrayList<Pair6>> adjList = new ArrayList<>();
		
		for(int i = 0; i < n; i++) {
			adjList.add(new ArrayList<Pair6>());//create adjacency list
		}
		
		for(int i = 0; i < m ; i++) {// for all edges
			int u = edge[i][0];
			int v = edge[i][1];
			int weight = edge[i][2];
			
			adjList.get(u).add(new Pair6(v, weight));//add adjacent node, weight to each node
		}
		
		int[] vis = new int[n];
		
		Stack<Integer> stack = new Stack<>();
		
		for(int i = 0; i < n ; i++) {
			if(vis[i] == 0) {
				topoSort(adjList, vis, stack, i);
			}
		}
		
		//Relaxing distance
		int[] dist = new int [n];
		for(int i = 0; i < n; i++) {
			dist[i] = (int)(1e9);// Integer.MAX_VALUE or infinity
		}
		
		int src = 0; //(given)
		dist[src] = 0;// distance of source to itself = 0
		while(!stack.isEmpty()) {
			int node = stack.peek();
			stack.pop();
			
			for(int i = 0; i < adjList.get(node).size();i++) {
				int v = adjList.get(node).get(i).node;
				int wt = adjList.get(node).get(i).weight;
				
				if(dist[node] + wt < dist[v]) {// dist[node] = distance to reach the node from source, wt = dist from u to v
					dist[v] = dist[node] + wt;
				}
			}
		}
		for (int i = 0; i < n; i++) {
		      if (dist[i] == 1e9) 
		    	  dist[i] = -1;
		    }
		return dist;
	}

	private void topoSort(ArrayList<ArrayList<Pair6>> adjList, int[] vis, Stack<Integer> stack, int node) {
		vis[node] = 1;// mark the visited for node as 1
		
		for(Pair6 it: adjList.get(node)) {
			int v = it.node;
			if(vis[v] == 0) {
				topoSort(adjList, vis, stack, v);// call toposort for adjacent nodes - v if not visited
			}
		}
		stack.push(node);
	}

}

class Pair6{
	int node;
	int weight;
	Pair6(int node, int weight) {
		this.node = node;
		this.weight = weight;
	}
}
