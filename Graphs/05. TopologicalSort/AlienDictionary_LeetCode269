package com.practice.graph2.bfs;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
/*
 * Topological Sort is used - Leetcode 269/ GFG
 * Create adjacency list first by comparing individual characters in the strings
 * Add an edge when you find a difference + break; - then call topo sort
 * Store as integer instead of character - s1.charAt(ptr) - 'a'
 * 
 * invalid scanario 1 - first word is longer than second and they have same prefix
 * invalid scanario 2 - if its not a proper topo sort - it means has cycle - return empty list - invalid
 * 
 */
public class AlienDictionary {

	public static void main(String[] args) {
		int N = 5, K = 4;
        String[] dict = {"baa", "abcd", "abca", "cab", "cad"};
		
//		invalid scenario - 1 		
//		int N = 2, K = 2;
//		String[] dict = {"abcd", "abc"};
		
//		invalid scenario - 2		
//		int N = 3, K = 2;
//		String[] dict = {"abc", "bat", "ade"};
        AlienDictionary obj = new AlienDictionary();
        String ans = obj.findOrder(dict, N, K);

        for (int i = 0; i < ans.length(); i++) {
            System.out.print(ans.charAt(i) + " ");
        }
        System.out.println("");

	}

	public String findOrder(String[] dict, int n, int k) {
		ArrayList<ArrayList<Integer>> adjList = new ArrayList<>();
		
		for(int i = 0; i < k; i++) {
			adjList.add(new ArrayList<Integer>());
		}
		for(int i = 0; i < n - 1; i++) {
			String s1 = dict[i];
			String s2 = dict[i+1];
			
			int len = Math.min(s1.length(),s2.length());

			//edge case - first word is longer than second and they have same prefix - this means its a  - invalid ordering
			if(s1.length() > s2.length() && s1.startsWith(s2)) {
				System.out.println("here");
				return "invalid";
			}
			
			for (int ptr = 0; ptr < len; ptr++) {
                if (s1.charAt(ptr) != s2.charAt(ptr)) {
                    adjList.get(s1.charAt(ptr) - 'a').add(s2.charAt(ptr) - 'a');
                    break;
                }
            }
		}
		
		for(int i = 0; i < adjList.size(); i++) {
			  for(int j = 0; j < adjList.get(i).size(); j++) {
				  System.out.print(i + " -> "+ adjList.get(i).get(j)+ " ");
			  }
			  System.out.println(" ");
		  }
		
		ArrayList<Integer> topoList = topoSort(adjList,k);
		
		String res = "";
		
		for(int it : topoList) {
			res = res + (char)(it + (int)'a');
		}
		
		if("".equalsIgnoreCase(res)) {
			return "invalid";
		}
		
		return res;
	}

	private ArrayList<Integer> topoSort(ArrayList<ArrayList<Integer>> adjList, int k) {
		int[] indegree = new int[k];
		
		ArrayList<Integer> orderedList = new ArrayList<>();
		
		for(int i = 0; i < k; i++) {
			for(int it: adjList.get(i)) {
				indegree[it]++;
			}
		}
		//System.out.println("sas");
		orderedList = bfs(adjList, k, indegree);
		
		return orderedList;
	}

	private ArrayList<Integer> bfs(ArrayList<ArrayList<Integer>> adjList, int k, int[] indegree) {
		ArrayList<Integer> orderedList = new ArrayList<>();
		
		Queue<Integer> queue = new LinkedList<>();
		for (int i = 0; i < k; i++) {
            if (indegree[i] == 0) {
                queue.add(i);
            }
        }
		
		while(!queue.isEmpty()) {
			int node = queue.peek();
			queue.remove();
			
			orderedList.add(node);
			
			for(int it : adjList.get(node)) {
				indegree[it]--;
				
				if(indegree[it] == 0) {
					queue.add(it);
				}
			}
		}
		
		//if its a proper topo sort - it means does not have cycle - valid
		if(orderedList.size() == k)
			return orderedList;
		
		//if its not a proper topo sort - it means has cycle - return empty list - invalid
		ArrayList<Integer> arr = new ArrayList<>();    
        return arr;     
	}

}
