package com.practice.graph2.floydwarshall;

/*
 * Floyd Warshall - multisource shortest path algo
 * Can be used to detect negative cycles
 * 
 * //go via each node - via0,via1...viaN-1 to loop the matrix and find the min path
 * 
 * Time Complexity: O(V3), as we have three nested loops each running for V times, where V = no. of vertices.
 * Space Complexity: O(V2), where V = no. of vertices. This space complexity is due to storing the adjacency matrix of the given graph.
 * 
 */
public class FloydWarshall {

	public static void main(String[] args) {
		int V = 4;
        int[][] matrix = new int[V][V];

        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                matrix[i][j] = -1;
            }
        }

        matrix[0][1] = 2;
        matrix[1][0] = 1;
        matrix[1][2] = 3;
        matrix[3][0] = 3;
        matrix[3][1] = 5;
        matrix[3][2] = 4;

        FloydWarshall obj = new FloydWarshall();
        obj.shortest_distance(matrix);

        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println("");
        }
	}

	public void shortest_distance(int[][] matrix)
    {
        int n = matrix.length;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(matrix[i][j] == -1){
                    matrix[i][j] = (int)1e9;
                }
                if(i == j){
                    matrix[i][j] = 0;
                }
            }
        }
        
        for(int k = 0; k < n; k++){// via each node - via0,via1...viaN-1
            for(int i = 0; i<n; i++){ // i and j are for matrix looping
                for(int j = 0; j<n; j++){
                    // if(matrix[i][k] != (int)1e9 && matrix[k][j] != (int)1e9 && (matrix[i][j] > matrix[i][k] + matrix[k][j])){
                    //     matrix[i][j] = matrix[i][k] + matrix[k][j];
                    // }
                     matrix[i][j] = Math.min(matrix[i][j], matrix[i][k] + matrix[k][j]);
                }
            }
        }
        
        //check for negative cycle - distance of node to itself should be 0 and can't be less
        for(int i = 0; i<n; i++){
            if(matrix[i][i] < 0){
                System.out.println("Has negative cycle");
            }
        }

        
        //before returning the matrix convert 1e9 to -1
        for(int i = 0; i<n; i++){
            for(int j = 0; j<n; j++){
                if(matrix[i][j] == (int)1e9){
                    matrix[i][j] = -1;
                }
            }
        }
    }
}
