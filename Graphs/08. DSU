package com.practice.graph2.disjointset;

import java.util.ArrayList;
import java.util.List;

/*
 * Disjoint Set - State if two nodes u and v belong to the same component or not
 * 
 * Don't use both unionByRank and unionBySize together - both have same TC = O(4alpha) ~ constant
 * 
 * Connect smaller to larger - it will help limit the height, so we don't have to take longer distance till parent
 */

public class DisjointSet {

	List<Integer> rank = new ArrayList<>(); 
	List<Integer> parent = new ArrayList<>(); 
	List<Integer> size = new ArrayList<>(); 
	
	public DisjointSet(int n) {
		for(int i = 0; i < n+1; i++) {// run till n+1 as it works for both 0 based and 1 based indexing
			rank.add(0);// initially all nodes will have rank 0
			parent.add(i);// initially all nodes will have parent itself
			size.add(1);// initially all nodes will have size 1
		}
	}
	
	
	public int findUltimateParent(int node) {
		if(node == parent.get(node)) {// id node == parent of itself - return the node as it is the ultimate parent of itself
			return node;
		}else {
			int ultPar = findUltimateParent(parent.get(node));// go to node's parent and recursively check for node's parent, it's parent's parent etc
			parent.set(node, ultPar);// path compression - set all children node's parent as the ultimate parent to reduce path to ultimate parent
			return parent.get(node);
		}
	}
	
	void unionBySize(int u, int v) {
		int ultPar_u = findUltimateParent(u);
		int ultPar_v = findUltimateParent(v);
		
		if(ultPar_u == ultPar_v) {// if both nodes u and v are belonging to the same component
			return;
		}
		if(size.get(ultPar_u) < size.get(ultPar_v)) {
			//smaller rank node gets attached to the greater rank node - so here set ultimate parent of u to ultimate parent of v
			parent.set(ultPar_u, ultPar_v);
			size.set(ultPar_v, size.get(ultPar_v) + size.get(ultPar_u));
		}else {
			//if both have same rank then they can be attached either way
			parent.set(ultPar_v, ultPar_u);// or parent.set(ultPar_u, ultPar_v);
			size.set(ultPar_u, size.get(ultPar_u) + size.get(ultPar_v));//increment the rank of parent for this buy size of smaller as its rank changes
		}
	}
	
	void unionByRank(int u, int v) {
		int ultPar_u = findUltimateParent(u);
		int ultPar_v = findUltimateParent(v);
		
		if(ultPar_u == ultPar_v) {// if both nodes u and v are belonging to the same component
			return;
		}
		if(rank.get(ultPar_u) < rank.get(ultPar_v)) {
			//smaller rank node gets attached to the greater rank node - so here set ultimate parent of u to ultimate parent of v
			parent.set(ultPar_u, ultPar_v);
		}else if(rank.get(ultPar_v) < rank.get(ultPar_u)) {
			//here set ultimate parent of u to ultimate parent of v
			parent.set(ultPar_v, ultPar_u);
		}else {
			//if both have same rank then they can be attached either way
			parent.set(ultPar_v, ultPar_u);// or parent.set(ultPar_u, ultPar_v);
			rank.set(ultPar_u, rank.get(ultPar_u)+1);//increment the rank of parent for this by 1 as its rank changes
		}
	}
	
	public static void main(String[] args) {
		DisjointSet ds = new DisjointSet(7);
//		ds.unionByRank(1,2);
//		ds.unionByRank(2,3);
//		ds.unionByRank(4,5);
//		ds.unionByRank(6,7);
//		ds.unionByRank(5,6);
		
		ds.unionBySize(1,2);
		ds.unionBySize(2,3);
		ds.unionBySize(4,5);
		ds.unionBySize(6,7);
		ds.unionBySize(5,6);
		
		
		//check if 3 and 7 belong to same component or not
		if(ds.findUltimateParent(3) == ds.findUltimateParent(7)) {
			System.out.println("Same");
		}else {
			System.out.println("not same");
		}
		
		//ds.unionByRank(3,7);
		ds.unionBySize(3,7);
		
		//check if 3 and 7 belong to same component or not
		if(ds.findUltimateParent(3) == ds.findUltimateParent(7)) {
			System.out.println("Same");
		}else {
			System.out.println("not same");
		}
	}	
}
