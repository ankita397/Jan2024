/*
 * Leetcode 200
 * 
 * Shortest code - Not Recommended as its not very generic
 * 
 */
class NumberOfIslands2 {
    public int numIslands(char[][] grid) {
        int rowSize = grid.length;
        int colSize = grid[0].length;
        int numOfIslands = 0;

        for(int i = 0; i < rowSize; i++){
            for(int j = 0; j < colSize; j++){
                if(grid[i][j] == '1'){// This means we got a starting node
                    markGrid(grid, i, j, rowSize, colSize);
                    numOfIslands++;
                }
            }
        }
        return numOfIslands;
    }

    private void markGrid(char[][] grid, int i, int j, int rowSize, int colSize){
        //check boundaries
        if(i < 0 || j < 0 || i >= rowSize || j >= colSize || grid[i][j] != '1'){
            return;
        }

        //Mark current cell a visited i.e, make it any other integer other than 1
        grid[i][j] = 2;
        
        markGrid(grid, i-1, j, rowSize, colSize);
        markGrid(grid, i+1, j, rowSize, colSize);
        markGrid(grid, i, j-1, rowSize, colSize);
        markGrid(grid, i, j+1, rowSize, colSize);

    }
    
    public static void main(String[] args) {
		// TODO Auto-generated method stub
//		char[][] grid =  {
//	            {'0', '1', '1', '1', '0', '0', '0'},
//	            {'0', '0', '1', '1', '0', '1', '0'}
//	        };
		
		char[][] grid =  {
	            {'1', '1', '0', '0', '0'},
	            {'1', '1', '0', '0', '0'},
	            {'0', '0', '1', '0', '0'},
	            {'0', '0', '0', '1', '1'}
	        };
		
	                
		NumberOfIslands2 obj = new NumberOfIslands2();
	        System.out.println(obj.numIslands(grid));
	}

}
