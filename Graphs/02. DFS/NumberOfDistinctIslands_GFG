package com.practice.graph2.dfs;

import java.util.ArrayList;
import java.util.HashSet;

/*
 * GFG - https://www.geeksforgeeks.org/problems/number-of-distinct-islands/1?utm_source=geeksforgeeks&utm_medium=article_practice_tab&utm_campaign=article_practice_tab
 * Use DFS 
 * Use Set<ArrayList<Integer>> to store the difference between the starting index and other indices.
 */

public class NumberOfDistinctIslands {

	public static void main(String[] args) {
			
			int[][] grid =  {
					{1, 1, 0, 0, 0}, 
		            {1, 1, 0, 0, 0}, 
		            {0, 0, 0, 1, 1}, 
		            {0, 0, 0, 1, 1}
		        };
			
		                
			NumberOfDistinctIslands obj = new NumberOfDistinctIslands();
		        System.out.println(obj.countDistinctIslands(grid));

	}

	public int countDistinctIslands(int[][] grid) {	
		int n = grid.length;
		int m = grid[0].length;
		
		boolean[][] vis = new boolean[n][m];
		HashSet<ArrayList<String>> set = new HashSet<>();
		
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m ; j++) {
				if(!vis[i][j] && grid[i][j] == 1) {// starting 1s
					int row0 = i;
					int col0 = j;
					ArrayList < String > list = new ArrayList < > ();
					dfs(grid, i,j,row0,col0,vis,list);
					set.add(list);
				}
			}
		}
		return set.size();
	}

	private void dfs(int[][] grid, int i, int j, int row0, int col0, boolean[][] vis, ArrayList<String> list) {
		//System.out.println(i+ " - "+ j);
		int n = grid.length;
		int m = grid[0].length;
		
		vis[i][j] = true;
	    list.add(toString(i - row0, j - col0));

		
		int[] dx = {0,0,-1,1};
		int[] dy = {-1,1,0,0};
		
		for(int x = 0; x < 4; x++) {
			int nrow = i + dx[x];
			int ncol = j + dy[x];
			
			if(nrow >=0 && nrow < n && ncol >=0 && ncol < m && vis[nrow][ncol] == false && grid[nrow][ncol] == 1) {
				dfs(grid, nrow, ncol,row0,col0, vis, list);
			}
		}
	}
	
	private String toString(int r, int c) {
	    return Integer.toString(r) + " " + Integer.toString(c);
	}

}

