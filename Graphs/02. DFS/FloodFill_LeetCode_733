package com.practice.graph2.dfs;

/*
 * Leetcode 773
 * Given image, sr = 1 , sc = 1, newColor = 2
 * sr and sc are starting row and starting col
 * 
 */
public class FloodFIll {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[][] image =  {
		        {1,1,1},
		        {1,1,0},
		        {1,0,1}
		    };

	    int sr = 1, sc = 1, newColor = 2;   
		FloodFIll obj = new FloodFIll();
	    int[][] ans = obj.floodFill(image, sr, sc, newColor);
	    
	    for(int i = 0; i < ans.length; i++) {
	    	for(int j = 0; j < ans[0].length;j++) {
	    		System.out.print(ans[i][j]+ " ");
	    	}
	    	System.out.println();
	    }
	}

	public int[][] floodFill(int[][] image, int sr, int sc, int color) {
		// TODO Auto-generated method stub
		int[][] newColorImg = new int[image.length][image[0].length];
		newColorImg = image;
		
		//get initial color
		int initColor = newColorImg[sr][sc];
		// no need to find the starting element as the starting row and col values are given
		// directly call dfs
		dfs(image,newColorImg,sr, sc,initColor,color);
		
		return newColorImg;
	}

	private void dfs(int[][] image,int[][] newColorImg, int i, int j,int initColor,int newColor) {
		int n = image.length;
		int m = image[0].length;
		
		if(i < 0 || j < 0 || i >= n || j >= m || image[i][j]!=initColor || newColorImg[i][j] == newColor) {//last condition - we do not proceed of the cell already has new color
			return;
		}
		
		newColorImg[i][j] = newColor;
		int[] dx = {-1, 1, 0, 0};
		int[] dy = {0, 0, 1, -1};
		
		for(int x = 0; x < 4; x++) {
			int nrow = i+dx[x];
			int ncol = j+dy[x];
			dfs(image,newColorImg, nrow,ncol,initColor,newColor);
		}
	}

}
