package com.practice.graph2.dfs;

import java.util.ArrayList;
/*
 * Both BFS and DFS can be used - connected components
 * Bipartite Graph means no 2 adjacent nodes should have same color
 * Time Complexity: O(V + 2E), Where V = Vertices, 2E is for total degrees as we traverse all adjacent nodes.
 * Space Complexity: O(3V) ~ O(V), Space for DFS stack space, colour array and an adjacency list.
 */
public class BipartiteGraphDFS {

	public static void main(String[] args) {
		ArrayList<ArrayList<Integer>> adjList = new ArrayList<>();
		for(int i = 0; i < 4; i++) {
			adjList.add(new ArrayList<Integer>());
		}
		
		adjList.get(0).add(2);
        adjList.get(2).add(0);
        adjList.get(0).add(3);
        adjList.get(3).add(0);
        adjList.get(1).add(3);
        adjList.get(3).add(1);
        adjList.get(2).add(3);
        adjList.get(3).add(2);

        BipartiteGraphDFS obj = new BipartiteGraphDFS();
        boolean isBip = obj.isBipartite(4, adjList);
        if(isBip)
            System.out.println("1");
        else System.out.println("0");
	}

	public boolean isBipartite(int vertices, ArrayList<ArrayList<Integer>> adjList) {
		boolean isBip = false;
		int[] color = new int[vertices];
		
		for(int i = 0; i < vertices; i++) {
			color[i] = -1;// initially mark all non-colored elements as -1
		}
		
		//loop for connected components
		for(int i = 0; i < vertices; i++) {
			if(color[i] == -1) {
				int col = 0;// color starting elements as 0
				isBip = dfs(adjList,col,color, i);//dfs for each starting elements
				if(!isBip)// if any of the dfs(starting or adjacent nodes) return a false, then this graph cannot be bipartite
					return false;
			}
		}
		
		return true;
	}

	private boolean dfs(ArrayList<ArrayList<Integer>> adjList, int col, int[] color, int node) {
		boolean isBip = false;
		color[node] = col;
		
		for(int adjNode : adjList.get(node)) {
			if(color[adjNode] == -1) {// if the adjNode is not color, then color it opposite
				isBip = dfs(adjList,1 - col,color, adjNode);// dfs for adj nodes
				if(!isBip)
					return false;
			}
			// if previously coloured and have the same colour
            else if(color[adjNode] == col) {
                return false; 
            }
		}
		return true;
	}

}
