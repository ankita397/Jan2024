package com.practice.graph2.dfs;

public class NumberOfClosedIslands {

	public static void main(String[] args) {
		int[][] grid = {{1,1,1,1,1,1,1,0},
		                {1,0,0,0,0,1,1,0},
		                {1,0,1,0,1,1,1,0},
		                {1,0,0,0,0,1,0,1},
		                {1,1,1,1,1,1,1,0}};
		
//		char[][] grid =  {
//	            {'1', '1', '0', '0', '0'},
//	            {'1', '1', '0', '0', '0'},
//	            {'0', '0', '1', '0', '0'},
//	            {'0', '0', '0', '1', '1'}
//	        };
		
	                
		NumberOfClosedIslands obj = new NumberOfClosedIslands();
	        System.out.println(obj.numClosedlands(grid));
	}

	public int numClosedlands(int[][] grid) {
		int count = 0;
		int n = grid.length;
		int m = grid[0].length;
		
		//run dfs for border elements and there it marks the elements as visited
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				if((i == 0 || j == 0 || i == n-1 || j == m-1) && grid[i][j] == 0) {// only border cells - i == 0 || j == 0 => 1st row and 1st col
					//i == m-1 || j == n-1 - last row and last col
					dfs(i, j, grid);
				}
			}
		}
		
		//run dfs for inner elements and there it marks the elements as visited and increment count for each starting element
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				if(grid[i][j] == 0) {
					count++;
					dfs(i, j, grid);
				}
			}
		}
		
		return count;
		
	}

	private void dfs(int i, int j, int[][] grid) {
		int n = grid.length;
		int m = grid[0].length;
		
		if(i < 0 || j < 0 || i >= n || j >= m || grid[i][j] != 0) {
			return;
		}
		grid[i][j] = 2;// mark as visited
		int[] dx = {-1,1,0,0};
		int[] dy = {0,0,1,-1};
		
		for(int x = 0; x < 4; x++) {
			int nrow = i + dx[x];
			int ncol = j + dy[x];

			dfs(nrow,ncol,grid);		
		}		
	}
}
