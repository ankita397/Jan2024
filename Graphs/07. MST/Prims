package com.practice.graph2.mst;

import java.util.PriorityQueue;
/*
 * PQ is used - GFG
 * 
 * 
 * Time Complexity: O(E*logE) + O(E*logE)~ O(E*logE), where E = no. of given edges.
 * The maximum size of the priority queue can be E so after at most E iterations the priority queue will be empty and the loop will end.
 * Inside the loop, there is a pop operation that will take logE time. This will result in the first O(E*logE) time complexity. 
 * Now, inside that loop, for every node, we need to traverse all its adjacent nodes where the number of nodes can be at most E. 
 * If we find any node unvisited, we will perform a push operation and for that, we need a logE time complexity. 
 * So this will result in the second O(E*logE). 
 * 
 * Space Complexity: O(E) + O(V), where E = no. of edges and V = no. of vertices. O(E) occurs due to the size of the priority queue and O(V) due to the visited array. If we wish to get the mst, we need an extra O(V-1) space to store the edges of the most.
 */
public class Prims_MST {

	public static void main(String[] args) {
		int V = 5;
        int[][] edges =  {{0, 1, 2}, {0, 2, 1}, {1, 2, 1}, {2, 3, 2}, {3, 4, 1}, {4, 2, 2}};

        Prims_MST obj = new Prims_MST();
        int sum = obj.spanningTree(V, edges);
        System.out.println("The sum of all the edge weights: " + sum);
	}
	
	static int spanningTree(int V, int edges[][]){
	    int[][] graph = new int[V][V];
        
        for (int[] edge : edges) {
            int source = edge[0];
            int destination = edge[1];
            int weight = edge[2];
            
            graph[source][destination] = weight;
            graph[destination][source] = weight;  // Assuming the graph is undirected
        }

        PriorityQueue<Pair> pq = new PriorityQueue<>((x, y) -> x.weight - y.weight);

        int[] vis = new int[V];
        pq.add(new Pair(0, 0));
        int sum = 0;

        while (pq.size() > 0) {
            int wt = pq.peek().weight;
            int node = pq.peek().node;
            pq.remove();

            if (vis[node] == 1) continue;

            vis[node] = 1;            // add it to the mst

            sum += wt;

            for (int adjNode = 0; adjNode < V; adjNode++) {
                int edgeWt = graph[node][adjNode];
                if (edgeWt > 0 && vis[adjNode] == 0) {
                    pq.add(new Pair(edgeWt, adjNode));
                }
            }
        }

        return sum;
	}
}

class Pair{
    int weight;
    int node;
    Pair(int weight, int node){
        this.weight = weight;
        this.node = node;
    }
}


//Using Adjacency list

/*class Pair {
    int node;
    int distance;
    public Pair(int distance, int node) {
        this.node = node;
        this.distance = distance;
    }
}
class Solution {
    //Function to find sum of weights of edges of the Minimum Spanning Tree.
    static int spanningTree(int V,
                            ArrayList<ArrayList<ArrayList<Integer>>> adj) {
        PriorityQueue<Pair> pq =
            new PriorityQueue<Pair>((x, y) -> x.distance - y.distance);

        int[] vis = new int[V];
        // {wt, node}
        pq.add(new Pair(0, 0));
        int sum = 0;
        while (pq.size() > 0) {
            int wt = pq.peek().distance;
            int node = pq.peek().node;
            pq.remove();

            if (vis[node] == 1) continue;
            // add it to the mst
            vis[node] = 1;
            sum += wt;

            for (int i = 0; i < adj.get(node).size(); i++) {
                int edW = adj.get(node).get(i).get(1);
                int adjNode = adj.get(node).get(i).get(0);
                if (vis[adjNode] == 0) {
                    pq.add(new Pair(edW, adjNode));
                }
            }
        }
        return sum;
    }
}*/
