/*
* Leetcode 37
* https://www.youtube.com/watch?v=FWAIf_EVUKE - Time stamp 20:44 for last formula explanation
*
*/
class SudokoSolver {
    public void solveSudoku(char[][] board) {
        solve(board);
    }

    private static boolean solve(char[][] board){
        //traverse the matrix
        //if a cell is empty
        //try putting a character in that empty cell 
            //- check for validity - conditions 1, 2 and 3
        //if validity - true, then try putting another character in the nect empty space 
            //- call solve(board) recursively 
            // return true if solve(board) == true or backtrack and mark the cell as empty
        //return false if you're not able to place any char in the empty cell
        //return true if none of the cells are blank to begin with
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                if(board[i][j] == '.'){//check for empty cell
                    for(char c = '1'; c <='9'; c++){
                        if(isValid(i,j,board,c) == true){
                            board[i][j] = c;

                            if(solve(board) == true){
                                return true;
                            }else{
                                board[i][j] = '.';//backtrack
                            }
                        }
                    }
                    return false;//could not place any char in the empty cells
                }
            }
        }
        return true;// no empty cells
    }

    private static boolean isValid(int row, int col, char[][] board, char c){
        //validate for row
        //validate for column
        //validate for 3x3 sub matrix
        for(int i = 0; i < 9; i++){
            if(board[row][i] == c){//check in 1 row
                return false;
            }
            if(board[i][col] == c){//check in 1 col
                return false;
            }
            int sub_rowIndex = 3 * (row/3) + i/3;// row num for the 3x3 sub matrix
            int sub_colIndex = 3 * (col/3) + i%3;// col num for the 3x3 sub matrix
            if(board[sub_rowIndex][sub_colIndex] == c){
                return false;
            }
        }
        return true;
    }
}
