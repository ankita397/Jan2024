package com.practice.recursion;

/*
 * Recursion
 * TC = NlogN
 */
public class MergeSort_Recursion {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] array = {12, 11, 13, 5, 6, 7};
        
        System.out.println("Original array:");
        for (int num : array) {
            System.out.print(num + " ");
        }
        System.out.println();

        mergeSort(array, 0, array.length - 1);

        System.out.println("\nSorted array:");
        for (int num : array) {
            System.out.print(num + " ");
        }
        System.out.println();
	}

	private static void mergeSort(int[] array, int low, int high) {
		if(low < high) {
			int mid = (low+high)/2;
			
			mergeSort(array,low,mid);
			mergeSort(array,mid+1,high);
			
			merge(array, low, mid, high);
			
		}
	}

	private static void merge(int[] array, int low, int mid, int high) {
		int[] temp = new int[array.length];
		
		int left = low;
		int right = mid+1;
		
		int k = low;
		while(left <= mid && right <= high) {
			if(array[left] <= array[right]) {
				temp[k++] = array[left];
				left++;
			}else {
				temp[k++] = array[right];
				right++;
			}
		}
		
		//copy remaining elements from left sub array to temp
		while(left<=mid) {
			temp[k++] =array[left];
			left++;
		}
		
		//copy remaining elements from right sub array to temp
		while(right<=high) {
			temp[k++] =array[right];
			right++;
		}
		
		//copy elements from temp to main array
		System.out.println("Temp Array:: ");
		for(int i = low; i <= high; i++) {
			System.out.println(temp[i]+ " ");
			array[i] = temp[i];
		}
		System.out.println();
	}

}
